<%-- 
Name:  						MySQL Table Generator
Author: 					Joe Developer
Created:					2006-06-03
Last Modified:				2007-09-19
Description: 				Creates table script for MySQL based on MS SQL Schema

--%>
<%@ CodeTemplate Language="C#" TargetLanguage="T-SQL" Src="" Inherits="CodeSmith.BaseTemplates.SqlCodeTemplate" Debug="False" Description="Template description here." %>

<%@ Property Name="SourceTable" Type="SchemaExplorer.TableSchema" Category="Context" Description="Table that the object is based on." %>
<%@ Property Name="StorageEngine" Type="System.String" Default="InnoDB" Category="Style" Description="Determines the table type." %>
<%@ Property Name="TablePrefix" Type="System.String" Default="mp_" Category="Style" Description="Table Prfix" %>

<%@ Assembly Name="CodeSmith.BaseTemplates" %>
<%@ Assembly Name="System.Data" %>
<%@ Assembly Name="SchemaExplorer" %>
<%@ Import Namespace="SchemaExplorer" %>
<%@ Import Namespace="System.Data" %>
<%@ Import Namespace="CodeSmith.BaseTemplates" %>

<% if (SourceTable.PrimaryKey.MemberColumns.Count == 1 && (SourceTable.PrimaryKey.MemberColumns[0].DataType == DbType.Guid || SourceTable.PrimaryKey.MemberColumns[0].DataType == DbType.Int16 || SourceTable.PrimaryKey.MemberColumns[0].DataType == DbType.Int32 || SourceTable.PrimaryKey.MemberColumns[0].DataType == DbType.Int64)) {
    ColumnSchema primaryKey = SourceTable.PrimaryKey.MemberColumns[0];
%>

<% if (primaryKey.DataType == DbType.Guid) {  %>

-- thie generation script doesn't create default values for non null columns so be sure and add those as appropriate
CREATE TABLE `<%= SourceTable.Name %>` (
<% for (int i = 0; i < SourceTable.PrimaryKey.MemberColumns.Count; i++) { %>
 `<%= SourceTable.Columns[i].Name %>` <%= GetColumnTypeWithDimensions(SourceTable.PrimaryKey.MemberColumns[i]) %> <%= GetNullStatement(SourceTable.PrimaryKey.MemberColumns[i]) %>, <% }  %>
<% for (int i = 0; i < SourceTable.NonPrimaryKeyColumns.Count; i++) { %>
 `<%= SourceTable.NonPrimaryKeyColumns[i].Name %>` <%= GetColumnTypeWithDimensions(SourceTable.NonPrimaryKeyColumns[i]) %> <%= GetNullStatement(SourceTable.NonPrimaryKeyColumns[i]) %>,
  <% } %>
<% for (int i = 0; i < SourceTable.PrimaryKey.MemberColumns.Count; i++) {  %>
 PRIMARY KEY (`<%= SourceTable.PrimaryKey.MemberColumns[i].Name %>`)   
     <% } %>
) ENGINE=<%= StorageEngine%> DEFAULT CHARSET=utf8;
	
<% } else { %>

-- thie generation script doesn't create default values for non null columns so be sure and add those as appropriate
CREATE TABLE `<%= SourceTable.Name %>` (
<% for (int i = 0; i < SourceTable.PrimaryKey.MemberColumns.Count; i++) { %>
 `<%= SourceTable.Columns[i].Name %>` <%= GetColumnTypeWithDimensions(SourceTable.PrimaryKey.MemberColumns[i]) %> <%= GetNullStatement(SourceTable.PrimaryKey.MemberColumns[i]) %> auto_increment, <% }  %>
<% for (int i = 0; i < SourceTable.NonPrimaryKeyColumns.Count; i++) { %>
 `<%= SourceTable.NonPrimaryKeyColumns[i].Name %>` <%= GetColumnTypeWithDimensions(SourceTable.NonPrimaryKeyColumns[i]) %> <%= GetNullStatement(SourceTable.NonPrimaryKeyColumns[i]) %>,
  <% } %>
<% for (int i = 0; i < SourceTable.PrimaryKey.MemberColumns.Count; i++) {  %>
 PRIMARY KEY (`<%= SourceTable.PrimaryKey.MemberColumns[i].Name %>`)    
 <% } %>
) ENGINE=<%= StorageEngine%> ;
	
<% } %>




<% } else { 
%>

-- there is a problem generating this table script
-- this generator only works with tables having a single field primary key, either int or varchar(36) to represent a guid
-- if the single column pk is an int it will create a sequence for the autogeneration of int primary keys



<% } %>


<script runat="template">

public string GetColumnTypeWithDimensions(ColumnSchema column) {
	return GetMySqlDbType(column) + GetColumnDimensions(column);
}

public string RemovePrefix(string TableName)
{

	return TableName.Replace(TablePrefix,"");
}

public string GetNullStatement(ColumnSchema column)
{
	if(column.AllowDBNull)
	{
		return "NULL";
	}
	
	return "NOT NULL";

}

public string GetMySqlDbType(ColumnSchema column)
{
	switch(GetSqlDbType(column))
	{
		case "Bit" :
		return "tinyint(1) unsigned";
		
		case "Text" :
		return "text";
		
		case "NText" :
		return "text";
		
		case "NVarChar" :
		return "varchar";
		
		case "VarChar" :
		return "varchar";
		
		case "Image" :
		return "LongBlob";
		
		case "Int" :
		return "int(11)";
		
		case "DateTime" :
		return "datetime";
		
		case "UniqueIdentifier" :
		return "varchar(36)";
		
		
	}
	
	return GetSqlDbType(column);

}

public string GetColumnDimensions(ColumnSchema column)
{
	switch(GetSqlDbType(column))
	{
		case "VarChar" :
		case "NVarChar" :
		
		return "(" + column.Size.ToString() + ")";
		
	}
	
	return "";



}

</script>