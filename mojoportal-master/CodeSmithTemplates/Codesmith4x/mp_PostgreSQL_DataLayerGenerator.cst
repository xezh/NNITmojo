<%-- 
Name:  					C# DataLayer Methods for MS SQL using SqlHelper
Author: 				Joe Developer
Created:				2005-04-15
Last Modified:			2012-08-11
Description: 			Generates C#  Static Data Layer class for PostgreSQL
						using the npgSqlHelper

--%>
<%@ CodeTemplate Language="C#" TargetLanguage="C#" Src="" Inherits="CodeSmith.BaseTemplates.SqlCodeTemplate" Debug="False" Description="Template description here." %>

<%@ Property Name="SourceTable" Type="SchemaExplorer.TableSchema" Category="Context" Description="Table that the object is based on." %>
<%@ Property Name="Author" Type="System.String" Default="Joe Developer" Category="Style" Description="Author of stored procedure" %>
<%@ Property Name="DataLayerNameSpace" Type="System.String" Default="mojoPortal.Data" Category="Style" Description="The Namespace of the Data Layer class" %>
<%@ Property Name="UseSubSonic" Type="System.Boolean" Default="False" Category="Options" Description="If true methods will delegate the work to SubSonic methods in the designated Common namespace" %>
<%@ Property Name="SubSonicDataLayerNameSpace" Type="System.String" Default="mojoPortal.Data.Common" Category="Style" Description="The Namespace of the Data Layer class" %>

<%@ Property Name="TablePrefix" Type="System.String" Default="mp_" Category="Style" Description="Table Prfix" %>

<%@ Property Name="UseProcs" Type="System.Boolean" Default="False" Category="Options" Description="If true stored procedures will be used. If false dynamci sql statements will be used" %>
<%@ Property Name="IncludeInsert" Type="System.Boolean" Default="True" Category="Options" Description="If true insert statements will be generated." %>
<%@ Property Name="IncludeUpdate" Type="System.Boolean" Default="True" Category="Options" Description="If true update statements will be generated." %>
<%@ Property Name="IncludeDelete" Type="System.Boolean" Default="True" Category="Options" Description="If true delete statements will be generated." %>
<%@ Property Name="IncludeSelect" Type="System.Boolean" Default="True" Category="Options" Description="If true Select One will be generated." %>
<%@ Property Name="IncludeSelectAll" Type="System.Boolean" Default="True" Category="Options" Description="If true Select All statements will be generated." %>

<%@ Assembly Name="CodeSmith.BaseTemplates" %>
<%@ Assembly Name="System.Data" %>
<%@ Assembly Name="SchemaExplorer" %>
<%@ Import Namespace="SchemaExplorer" %>
<%@ Import Namespace="System.Data" %>
<%@ Import Namespace="CodeSmith.BaseTemplates" %>

<% if (SourceTable.PrimaryKey == null) throw new ApplicationException("SourceTable does not contain a primary key."); %>
<% ColumnSchema primaryKey = SourceTable.PrimaryKey.MemberColumns[0]; %>
// Author:					<%= Author %>
// Created:					<%= DateTime.Now.Year.ToString() %>-<%= DateTime.Now.Month.ToString() %>-<%= DateTime.Now.Day.ToString() %>
// Last Modified:			<%= DateTime.Now.Year.ToString() %>-<%= DateTime.Now.Month.ToString() %>-<%= DateTime.Now.Day.ToString() %>
// 
// The use and distribution terms for this software are covered by the 
// Common Public License 1.0 (http://opensource.org/licenses/cpl.php)  
// which can be found in the file CPL.TXT at the root of this distribution.
// By using this software in any fashion, you are agreeing to be bound by 
// the terms of this license.
//
// You must not remove this notice, or any other, from this software.
	
using System;
using System.Text;
using System.Data;
using System.Data.Common;
using System.Configuration;
using System.IO;
using Npgsql;
using NpgsqlTypes;
using mojoPortal.Data; // add a project reference to mojoPortal.Data.pgsql to get this
<% if (UseSubSonic) {  %>
using Common = <%= SubSonicDataLayerNameSpace%>;
<% } %>
	
namespace <%= DataLayerNameSpace %>
{
	public static class DB<%= GetClassName() %>
    {
	<% if (primaryKey.DataType == DbType.Guid) {  %>
	
		<%="///" %> <summary>
		<%="///" %> Inserts a row in the <%= SourceTable.Name %> table. Returns rows affected count.
		<%="///" %> </summary>
		<% for (int i = 0; i < SourceTable.Columns.Count; i++) { %>
		<%="///" %> <param name="<%= GetParamName(SourceTable.Columns[i].Name) %>"> <%= GetParamName(SourceTable.Columns[i].Name) %> </param>
				<% } %>
		/// <returns>int</returns>
		public static int Create(
		<% for (int i = 0; i < SourceTable.Columns.Count; i++) { %>
			<%= GetCSharpVariableType(SourceTable.Columns[i]) %> <%= GetParamName(SourceTable.Columns[i].Name) %><% if (i < SourceTable.Columns.Count - 1) { %>, <% }else{ %>) <% } %>
				<% } %>
		{
	<% if(UseSubSonic) { %>
			return Common.DB<%= GetClassName() %>.Create(
					<% for (int i = 0; i < SourceTable.Columns.Count; i++) { %>
						<%= GetParamName(SourceTable.Columns[i].Name) %><% if (i < SourceTable.Columns.Count - 1) { %>, <% }else{ %>); <% } %>
				<% } %>
			
	<% } else { //don't use SubSonic %>	
			<% if (UseProcs){ %>
			NpgsqlParameter[] arParams = new NpgsqlParameter[<%= SourceTable.Columns.Count%>];
		
			<% for (int i = 0; i < SourceTable.Columns.Count; i++) { %>
			arParams[<%= i%>] = new NpgsqlParameter("<%= GetColumnName(SourceTable.Columns[i].Name) %>", NpgsqlTypes.NpgsqlDbType.<%= GetNpgsqlDbType(SourceTable.Columns[i]) %><%= GetSqlParamSize(SourceTable.Columns[i]) %>);
			arParams[<%= i%>].Direction = ParameterDirection.Input;
			arParams[<%= i%>].Value = <%= GetParamValue(SourceTable.Columns[i]) %>;
			
			<% } %>
			int rowsAffected = NpgsqlHelper.ExecuteNonQuery(GetConnectionString(),
				CommandType.StoredProcedure, 
				"<%= GetTableName(SourceTable.Name) %>_insert(<% for (int i = 0; i < SourceTable.Columns.Count; i++) { %>:<%= GetColumnName(SourceTable.Columns[i].Name)%><% if (i < SourceTable.Columns.Count - 1) { %>,<% } %><% } %>)",
				arParams);
			<% } else { %>
			StringBuilder sqlCommand = new StringBuilder();
			sqlCommand.Append("INSERT INTO <%= SourceTable.Name.ToLower() %> (");
			<% for (int i = 0; i < SourceTable.Columns.Count; i++) { %>
			sqlCommand.Append("<%= SourceTable.Columns[i].Name.ToLower() %><% if (i < SourceTable.Columns.Count - 1) { %>, ");<% }else{ %> )"); <% } %>
			<% } %>
			
			sqlCommand.Append(" VALUES (");
			<% for (int i = 0; i < SourceTable.Columns.Count; i++) { %>
			sqlCommand.Append(":<%= SourceTable.Columns[i].Name.ToLower() %><% if (i < SourceTable.Columns.Count - 1) { %>, ");<% }else{ %> "); <% } %>
			<% } %>
			sqlCommand.Append(")");
			sqlCommand.Append(";");
			
			NpgsqlParameter[] arParams = new NpgsqlParameter[<%= SourceTable.Columns.Count%>];
			
			<% for (int i = 0; i < SourceTable.Columns.Count; i++) { %>
			arParams[<%= i%>] = new NpgsqlParameter("<%= GetColumnName(SourceTable.Columns[i].Name) %>", NpgsqlTypes.NpgsqlDbType.<%= GetNpgsqlDbType(SourceTable.Columns[i]) %><%= GetSqlParamSize(SourceTable.Columns[i]) %>);
			arParams[<%= i%>].Direction = ParameterDirection.Input;
			arParams[<%= i%>].Value = <%= GetParamValue(SourceTable.Columns[i]) %>;
			
			<% } %>
			int rowsAffected = NpgsqlHelper.ExecuteNonQuery(
				ConnectionString.GetWriteConnectionString(),
				CommandType.Text, 
				sqlCommand.ToString(),
				arParams);
			
			<% } %>
			return rowsAffected;
			
		<% } %>
		}
	
	<% } else { %>
	
		<%="///" %> <summary>
		<%="///" %> Inserts a row in the <%= SourceTable.Name %> table. Returns new integer id.
		<%="///" %> </summary>
		<% for (int i = 0; i < SourceTable.NonPrimaryKeyColumns.Count; i++) { %>
		<%="///" %> <param name="<%= GetParamName(SourceTable.NonPrimaryKeyColumns[i].Name) %>"> <%= GetParamName(SourceTable.NonPrimaryKeyColumns[i].Name) %> </param>
				<% } %>
		/// <returns>int</returns>
		public static int Create(
		<% for (int i = 0; i < SourceTable.NonPrimaryKeyColumns.Count; i++) { %>
			<%= GetCSharpVariableType(SourceTable.NonPrimaryKeyColumns[i]) %> <%= GetParamName(SourceTable.NonPrimaryKeyColumns[i].Name) %><% if (i < SourceTable.NonPrimaryKeyColumns.Count - 1) { %>, <% }else{ %>) <% } %>
				<% } %>
		{
	<% if(UseSubSonic) { %>
			return Common.DB<%= GetClassName() %>.Create(
			<% for (int i = 0; i < SourceTable.NonPrimaryKeyColumns.Count; i++) { %>
				<%= GetParamName(SourceTable.NonPrimaryKeyColumns[i].Name) %><% if (i < SourceTable.NonPrimaryKeyColumns.Count - 1) { %>, <% }else{ %>); <% } %>
		<% } %>
	
	<% } else { //don't use SubSonic %>		
		<% if (UseProcs){ %>
			NpgsqlParameter[] arParams = new NpgsqlParameter[<%= SourceTable.NonPrimaryKeyColumns.Count%>];
			<% for (int i = 0; i < SourceTable.NonPrimaryKeyColumns.Count; i++) { %>
			arParams[<%= i%>] = new NpgsqlParameter("<%= GetColumnName(SourceTable.NonPrimaryKeyColumns[i].Name) %>", NpgsqlTypes.NpgsqlDbType.<%= GetNpgsqlDbType(SourceTable.NonPrimaryKeyColumns[i]) %><%= GetSqlParamSize(SourceTable.NonPrimaryKeyColumns[i]) %>);
			arParams[<%= i%>].Direction = ParameterDirection.Input;
			arParams[<%= i%>].Value = <%= GetParamValue(SourceTable.NonPrimaryKeyColumns[i]) %>;
			
			<% } %>
			int newID = Convert.ToInt32(NpgsqlHelper.ExecuteScalar(
				ConnectionString.GetWriteConnectionString(),
				CommandType.StoredProcedure, 
				"<%= GetTableName(SourceTable.Name) %>_insert(<% for (int i = 0; i < SourceTable.NonPrimaryKeyColumns.Count; i++) { %>:<%= GetColumnName(SourceTable.NonPrimaryKeyColumns[i].Name)%><% if (i < SourceTable.NonPrimaryKeyColumns.Count - 1) { %>,<% } %><% } %>)",
				arParams));
		<% } else { %>
			
			StringBuilder sqlCommand = new StringBuilder();
			sqlCommand.Append("INSERT INTO <%= SourceTable.Name.ToLower() %> (");
			<% for (int i = 0; i < SourceTable.NonPrimaryKeyColumns.Count; i++) { %>
			sqlCommand.Append("<%= SourceTable.NonPrimaryKeyColumns[i].Name.ToLower() %><% if (i < SourceTable.NonPrimaryKeyColumns.Count - 1) { %>, ");<% }else{ %> )"); <% } %>
			<% } %>
			
			sqlCommand.Append(" VALUES (");
			<% for (int i = 0; i < SourceTable.NonPrimaryKeyColumns.Count; i++) { %>
			sqlCommand.Append(":<%= SourceTable.NonPrimaryKeyColumns[i].Name.ToLower() %><% if (i < SourceTable.NonPrimaryKeyColumns.Count - 1) { %>, ");<% }else{ %> )"); <% } %>
			<% } %>
			sqlCommand.Append(";");
			sqlCommand.Append(" SELECT CURRVAL('<%= SourceTable.Name.ToLower() %>id_seq');");
			
			NpgsqlParameter[] arParams = new NpgsqlParameter[<%= SourceTable.NonPrimaryKeyColumns.Count%>];
			<% for (int i = 0; i < SourceTable.NonPrimaryKeyColumns.Count; i++) { %>
			arParams[<%= i%>] = new NpgsqlParameter("<%= GetColumnName(SourceTable.NonPrimaryKeyColumns[i].Name) %>", NpgsqlTypes.NpgsqlDbType.<%= GetNpgsqlDbType(SourceTable.NonPrimaryKeyColumns[i]) %><%= GetSqlParamSize(SourceTable.NonPrimaryKeyColumns[i]) %>);
			arParams[<%= i%>].Direction = ParameterDirection.Input;
			arParams[<%= i%>].Value = <%= GetParamValue(SourceTable.NonPrimaryKeyColumns[i]) %>;
			
			<% } %>
			
			int newID = Convert.ToInt32(NpgsqlHelper.ExecuteScalar(
				ConnectionString.GetWriteConnectionString(),
				CommandType.Text, 
				sqlCommand.ToString(),
				arParams));
			
			<% } %>
	
			return newID;
			
	<% } %>
		}
	
	<% } %>
	
		<%="///" %> <summary>
		<%="///" %> Updates a row in the <%= SourceTable.Name %> table. Returns true if row updated.
		<%="///" %> </summary>
		<% for (int i = 0; i < SourceTable.Columns.Count; i++) { %>
		<%="///" %> <param name="<%= GetParamName(SourceTable.Columns[i].Name) %>"> <%= GetParamName(SourceTable.Columns[i].Name) %> </param>
				<% } %>
		/// <returns>bool</returns>
		public static bool Update(
			<% for (int i = 0; i < SourceTable.PrimaryKey.MemberColumns.Count; i++) { %>
			<%= GetCSharpVariableType(SourceTable.PrimaryKey.MemberColumns[i]) %>  <%= GetParamName(SourceTable.PrimaryKey.MemberColumns[i].Name) %><% if (i < SourceTable.PrimaryKey.MemberColumns.Count - 1) { %>, <% } %>,<% } %> 
			<% for (int i = 0; i < SourceTable.NonPrimaryKeyColumns.Count; i++) { %>
			<%= GetCSharpVariableType(SourceTable.NonPrimaryKeyColumns[i]) %> <%= GetParamName(SourceTable.NonPrimaryKeyColumns[i].Name) %><% if (i < SourceTable.NonPrimaryKeyColumns.Count - 1) { %>, <% }else{ %>) <% } %>
			<% } %>
		{
	<% if(UseSubSonic) { %>
			return Common.DB<%= GetClassName() %>.Update(
			<% for (int i = 0; i < SourceTable.Columns.Count; i++) { %>
				<%= GetParamName(SourceTable.Columns[i].Name) %><% if (i < SourceTable.Columns.Count - 1) { %>, <% }else{ %>); <% } %>
		<% } %>
		
	<%}else{ //dont use SubSonic %>
			<% if (UseProcs){ %>
			NpgsqlParameter[] arParams = new NpgsqlParameter[<%= SourceTable.PrimaryKey.MemberColumns.Count + SourceTable.NonPrimaryKeyColumns.Count%>];
			
			<% for (int i = 0; i < SourceTable.Columns.Count; i++) { %>
			arParams[<%= i%>] = new NpgsqlParameter("<%= GetColumnName(SourceTable.Columns[i].Name) %>", NpgsqlTypes.NpgsqlDbType.<%= GetNpgsqlDbType(SourceTable.Columns[i]) %><%= GetSqlParamSize(SourceTable.Columns[i]) %>); 
			arParams[<%= i%>].Direction = ParameterDirection.Input;
			arParams[<%= i%>].Value = <%= GetParamValue(SourceTable.Columns[i]) %>;
			
			<% } %>
			int rowsAffected = NpgsqlHelper.ExecuteNonQuery(
				ConnectionString.GetWriteConnectionString(),
				CommandType.StoredProcedure, 
				"<%= GetTableName(SourceTable.Name) %>_update(<% for (int i = 0; i < SourceTable.Columns.Count; i++) { %>:<%= GetColumnName(SourceTable.Columns[i].Name)%><% if (i < SourceTable.Columns.Count - 1) { %>,<% } %><% } %>)", 
				arParams);
			<% } else { %>
			
			StringBuilder sqlCommand = new StringBuilder();
			sqlCommand.Append("UPDATE <%= SourceTable.Name.ToLower() %> ");
			sqlCommand.Append("SET  ");
			<% for (int i = 0; i < SourceTable.NonPrimaryKeyColumns.Count; i++) { %>
			sqlCommand.Append("<%= SourceTable.NonPrimaryKeyColumns[i].Name.ToLower() %> = :<%= SourceTable.NonPrimaryKeyColumns[i].Name.ToLower() %><% if (i < SourceTable.NonPrimaryKeyColumns.Count - 1) { %>, ");<% }else{ %> "); <% } %>
			<% } %>
			
			sqlCommand.Append("WHERE  ");
			<% for (int i = 0; i < SourceTable.PrimaryKey.MemberColumns.Count; i++) { %>
			sqlCommand.Append("<%= SourceTable.PrimaryKey.MemberColumns[i].Name.ToLower() %> = :<%= SourceTable.PrimaryKey.MemberColumns[i].Name.ToLower() %><% if (i < SourceTable.PrimaryKey.MemberColumns.Count - 1) { %> AND ");<% }else{ %> "); <% } %>
			<% } %>
			sqlCommand.Append(";");
			
			NpgsqlParameter[] arParams = new NpgsqlParameter[<%= SourceTable.PrimaryKey.MemberColumns.Count + SourceTable.NonPrimaryKeyColumns.Count%>];
			
			<% for (int i = 0; i < SourceTable.Columns.Count; i++) { %>
			arParams[<%= i%>] = new NpgsqlParameter("<%= GetColumnName(SourceTable.Columns[i].Name) %>", NpgsqlTypes.NpgsqlDbType.<%= GetNpgsqlDbType(SourceTable.Columns[i]) %><%= GetSqlParamSize(SourceTable.Columns[i]) %>); 
			arParams[<%= i%>].Direction = ParameterDirection.Input;
			arParams[<%= i%>].Value = <%= GetParamValue(SourceTable.Columns[i]) %>;
			
			<% } %>
			
			int rowsAffected = NpgsqlHelper.ExecuteNonQuery(
				ConnectionString.GetWriteConnectionString(),
				CommandType.Text, 
				sqlCommand.ToString(), 
				arParams);
	
			<% } %>
			return (rowsAffected > -1);
			
	<% } %>
		}
		
		<%="///" %> <summary>
		<%="///" %> Deletes a row from the <%= SourceTable.Name %> table. Returns true if row deleted.
		<%="///" %> </summary>
		<% for (int i = 0; i < SourceTable.PrimaryKey.MemberColumns.Count; i++) { %>
		<%="///" %> <param name="<%= GetParamName(SourceTable.PrimaryKey.MemberColumns[i].Name) %>"> <%= GetParamName(SourceTable.PrimaryKey.MemberColumns[i].Name) %> </param>
				<% } %>
		/// <returns>bool</returns>
		public static bool Delete(
			<% for (int i = 0; i < SourceTable.PrimaryKey.MemberColumns.Count; i++) { %>
			<%= GetCSharpVariableType(SourceTable.PrimaryKey.MemberColumns[i]) %>  <%= GetParamName(SourceTable.PrimaryKey.MemberColumns[i].Name) %><% if (i < SourceTable.PrimaryKey.MemberColumns.Count - 1) { %>, <% } %>)<% } %> 
		{
	<% if(UseSubSonic) { %>
			return Common.DB<%= GetClassName() %>.Delete(
			<% for (int i = 0; i < SourceTable.PrimaryKey.MemberColumns.Count; i++) { %>
				<%= GetParamName(SourceTable.PrimaryKey.MemberColumns[i].Name) %><% if (i < SourceTable.PrimaryKey.MemberColumns.Count - 1) { %>, <% }else{ %>); <% } %>
		<% } %>
	
	<%}else{ //dont use SubSonic %>
			
			<% if (UseProcs){ %>
			NpgsqlParameter[] arParams = new NpgsqlParameter[<%= SourceTable.PrimaryKey.MemberColumns.Count%>];
			
			<% for (int i = 0; i < SourceTable.PrimaryKey.MemberColumns.Count; i++) { %>
			arParams[<%= i%>] = new NpgsqlParameter("<%= GetColumnName(SourceTable.PrimaryKey.MemberColumns[i].Name) %>", NpgsqlTypes.NpgsqlDbType.<%= GetNpgsqlDbType(SourceTable.PrimaryKey.MemberColumns[i]) %>);
			arParams[0].Direction = ParameterDirection.Input;
			arParams[0].Value = <%= GetParamValue(SourceTable.PrimaryKey.MemberColumns[i]) %>;
			<% } %> 
			
			int rowsAffected = NpgsqlHelper.ExecuteNonQuery(
				ConnectionString.GetWriteConnectionString(),
				CommandType.StoredProcedure, 
				"<%= GetTableName(SourceTable.Name) %>_delete(<% for (int i = 0; i < SourceTable.PrimaryKey.MemberColumns.Count; i++) { %>:<%= GetColumnName(SourceTable.PrimaryKey.MemberColumns[i].Name)%><% if (i < SourceTable.PrimaryKey.MemberColumns.Count - 1) { %>,<% } %><% } %>)", 
				arParams);
			<% }else{ %>
			
			StringBuilder sqlCommand = new StringBuilder();
			sqlCommand.Append("DELETE FROM <%=SourceTable.Name.ToLower() %> ");
			sqlCommand.Append("WHERE ");
			<% for (int i = 0; i < SourceTable.PrimaryKey.MemberColumns.Count; i++) { %>
			sqlCommand.Append("<%= SourceTable.PrimaryKey.MemberColumns[i].Name.ToLower() %> = :<%= SourceTable.PrimaryKey.MemberColumns[i].Name.ToLower() %><% if (i < SourceTable.PrimaryKey.MemberColumns.Count - 1) { %> AND ");<% }else{ %> "); <% } %>
			<% } %>
			sqlCommand.Append(";");
			
			NpgsqlParameter[] arParams = new NpgsqlParameter[<%= SourceTable.PrimaryKey.MemberColumns.Count%>];
			
			<% for (int i = 0; i < SourceTable.PrimaryKey.MemberColumns.Count; i++) { %>
			arParams[<%= i%>] = new NpgsqlParameter("<%= GetColumnName(SourceTable.PrimaryKey.MemberColumns[i].Name) %>", NpgsqlTypes.NpgsqlDbType.<%= GetNpgsqlDbType(SourceTable.PrimaryKey.MemberColumns[i]) %>);
			arParams[0].Direction = ParameterDirection.Input;
			arParams[0].Value = <%= GetParamValue(SourceTable.PrimaryKey.MemberColumns[i]) %>;
			<% } %> 
			int rowsAffected = NpgsqlHelper.ExecuteNonQuery(
				ConnectionString.GetWriteConnectionString(),
				CommandType.Text, 
				sqlCommand.ToString(), 
				arParams);
	
			<% } %> 
			return (rowsAffected > -1);
			
	<% } %>	
		}
		
		<%="///" %> <summary>
		<%="///" %> Gets an IDataReader with one row from the <%= SourceTable.Name %> table.
		<%="///" %> </summary>
		<% for (int i = 0; i < SourceTable.PrimaryKey.MemberColumns.Count; i++) { %>
		<%="///" %> <param name="<%= GetParamName(SourceTable.PrimaryKey.MemberColumns[i].Name) %>"> <%= GetParamName(SourceTable.PrimaryKey.MemberColumns[i].Name) %> </param>
				<% } %>
		public static IDataReader GetOne(
		<% for (int i = 0; i < SourceTable.PrimaryKey.MemberColumns.Count; i++) { %>
			<%= GetCSharpVariableType(SourceTable.PrimaryKey.MemberColumns[i]) %>  <%= GetParamName(SourceTable.PrimaryKey.MemberColumns[i].Name) %><% if (i < SourceTable.PrimaryKey.MemberColumns.Count - 1) { %>, <% } %>)<% } %>  
		{
	<% if(UseSubSonic) { %>
			return Common.DB<%= GetClassName() %>.GetOne(
			<% for (int i = 0; i < SourceTable.PrimaryKey.MemberColumns.Count; i++) { %>
				<%= GetParamName(SourceTable.PrimaryKey.MemberColumns[i].Name) %><% if (i < SourceTable.PrimaryKey.MemberColumns.Count - 1) { %>, <% }else{ %>); <% } %>
		<% } %>
	<%}else{ //dont use SubSonic %>
			
		<% if (UseProcs){ %>
			NpgsqlParameter[] arParams = new NpgsqlParameter[<%= SourceTable.PrimaryKey.MemberColumns.Count%>];
			
			<% for (int i = 0; i < SourceTable.PrimaryKey.MemberColumns.Count; i++) { %>
			arParams[<%= i%>] = new NpgsqlParameter("<%= GetColumnName(SourceTable.PrimaryKey.MemberColumns[i].Name) %>", NpgsqlTypes.NpgsqlDbType.<%= GetNpgsqlDbType(SourceTable.PrimaryKey.MemberColumns[i]) %>);
			arParams[0].Direction = ParameterDirection.Input;
			arParams[0].Value = <%= GetParamValue(SourceTable.PrimaryKey.MemberColumns[i]) %>;
			
			<% } %> 
			return NpgsqlHelper.ExecuteReader(
				ConnectionString.GetReadConnectionString(),
				CommandType.StoredProcedure, 
				"<%= GetTableName(SourceTable.Name) %>_select_one(<% for (int i = 0; i < SourceTable.PrimaryKey.MemberColumns.Count; i++) { %>:<%= GetColumnName(SourceTable.PrimaryKey.MemberColumns[i].Name)%><% if (i < SourceTable.PrimaryKey.MemberColumns.Count - 1) { %>,<% } %><% } %>)", 
				arParams);
		<% } else { %>
			StringBuilder sqlCommand = new StringBuilder();
			sqlCommand.Append("SELECT  * ");
			sqlCommand.Append("FROM	<%= SourceTable.Name.ToLower() %> ");
			sqlCommand.Append("WHERE ");
			<% for (int i = 0; i < SourceTable.PrimaryKey.MemberColumns.Count; i++) { %>
			sqlCommand.Append("<%= SourceTable.PrimaryKey.MemberColumns[i].Name.ToLower() %> = :<%= SourceTable.PrimaryKey.MemberColumns[i].Name.ToLower() %><% if (i < SourceTable.PrimaryKey.MemberColumns.Count - 1) { %> AND ");<% }else{ %> "); <% } %>
			<% } %>
			sqlCommand.Append(";");
			
			NpgsqlParameter[] arParams = new NpgsqlParameter[<%= SourceTable.PrimaryKey.MemberColumns.Count%>];
			
			<% for (int i = 0; i < SourceTable.PrimaryKey.MemberColumns.Count; i++) { %>
			arParams[<%= i%>] = new NpgsqlParameter("<%= GetColumnName(SourceTable.PrimaryKey.MemberColumns[i].Name) %>", NpgsqlTypes.NpgsqlDbType.<%= GetNpgsqlDbType(SourceTable.PrimaryKey.MemberColumns[i]) %>);
			arParams[0].Direction = ParameterDirection.Input;
			arParams[0].Value = <%= GetParamValue(SourceTable.PrimaryKey.MemberColumns[i]) %>;
			
			<% } %> 
			return NpgsqlHelper.ExecuteReader(
				ConnectionString.GetReadConnectionString(),
				CommandType.Text, 
				sqlCommand.ToString(), 
				arParams);
		
		<% } %>
				
	<% } %> 
		}
		
		/// <summary>
		/// Gets an IDataReader with all rows in the <%= SourceTable.Name %> table.
		/// </summary>
		public static IDataReader GetAll()
		{
			<% if (UseProcs){ %>
			return NpgsqlHelper.ExecuteReader(
				ConnectionString.GetReadConnectionString(),
				CommandType.StoredProcedure, 
				"<%= GetTableName(SourceTable.Name) %>_select_all()",
				null);
			<% } else { %>
			
			StringBuilder sqlCommand = new StringBuilder();
			sqlCommand.Append("SELECT  * ");
			sqlCommand.Append("FROM	<%= SourceTable.Name.ToLower() %> ");
			sqlCommand.Append(";");
			
			return NpgsqlHelper.ExecuteReader(
				GetReadConnectionString(),
				CommandType.Text, 
				sqlCommand.ToString(),
				null);
			
			<% } %>
	
		}
		
		/// <summary>
		/// Gets a count of rows in the <%= SourceTable.Name %> table.
		/// </summary>
		public static int GetCount()
		{
			<% if (UseProcs){ %>
			return Convert.ToInt32(NpgsqlHelper.ExecuteScalar(
				ConnectionString.GetReadConnectionString(),
				CommandType.StoredProcedure,
				"<%= GetTableName(SourceTable.Name) %>_count()",
				null));
				
			<% } else { %>
			
			StringBuilder sqlCommand = new StringBuilder();
			sqlCommand.Append("SELECT  Count(*) ");
			sqlCommand.Append("FROM	<%= SourceTable.Name.ToLower() %> ");
			sqlCommand.Append(";");
			
			return Convert.ToInt32(NpgsqlHelper.ExecuteScalar(
				ConnectionString.GetReadConnectionString(),
				CommandType.Text,
				sqlCommand.ToString(),
				null));
			
			<% } %>
	
		}
		
		/// <summary>
		/// Gets a page of data from the <%= SourceTable.Name %> table.
		/// </summary>
		/// <param name="pageNumber">The page number.</param>
		/// <param name="pageSize">Size of the page.</param>
		/// <param name="totalPages">total pages</param>
		public static IDataReader GetPage(
			int pageNumber, 
			int pageSize,
			out int totalPages)
		{
			int pageLowerBound = (pageSize * pageNumber) - pageSize;
            totalPages = 1;
            int totalRows = GetCount();

            if (pageSize > 0) totalPages = totalRows / pageSize;

            if (totalRows <= pageSize)
            {
                totalPages = 1;
            }
            else
            {
                int remainder;
                Math.DivRem(totalRows, pageSize, out remainder);
                if (remainder > 0)
                {
                    totalPages += 1;
                }
            }
			
			
		<% if (UseProcs){ %>
		
			NpgsqlParameter[] arParams = new NpgsqlParameter[2];
			
			arParams[0] = new NpgsqlParameter("pagenumber", NpgsqlTypes.NpgsqlDbType.Integer);
			arParams[0].Direction = ParameterDirection.Input;
			arParams[0].Value = pageNumber;

			arParams[1] = new NpgsqlParameter("pagesize", NpgsqlTypes.NpgsqlDbType.Integer);
			arParams[1].Direction = ParameterDirection.Input;
			arParams[1].Value = pageSize;
			
			return NpgsqlHelper.ExecuteReader(
				ConnectionString.GetReadConnectionString(),
				CommandType.StoredProcedure, 
				"<%= GetTableName(SourceTable.Name) %>_selectpage(:pagenumber,:pagesize)", 
				arParams);
				
		<% } else { %>
		
			NpgsqlParameter[] arParams = new NpgsqlParameter[2];
			
            arParams[0] = new NpgsqlParameter("pagesize", NpgsqlTypes.NpgsqlDbType.Integer);
            arParams[0].Direction = ParameterDirection.Input;
            arParams[0].Value = pageSize;

            arParams[1] = new NpgsqlParameter("pageoffset", NpgsqlTypes.NpgsqlDbType.Integer);
            arParams[1].Direction = ParameterDirection.Input;
            arParams[1].Value = pageLowerBound;
		
			StringBuilder sqlCommand = new StringBuilder();
			sqlCommand.Append("SELECT	* ");
			sqlCommand.Append("FROM	<%= SourceTable.Name.ToLower() %>  ");
			//sqlCommand.Append("WHERE  ");
			//sqlCommand.Append("ORDER BY  ");
            //sqlCommand.Append("  ");
			sqlCommand.Append("LIMIT  :pagesize" );

            if (pageNumber > 1)
                sqlCommand.Append(" OFFSET :pageoffset ");
				
			sqlCommand.Append(";");
			
			return NpgsqlHelper.ExecuteReader(
				ConnectionString.GetReadConnectionString(),
				CommandType.Text, 
				sqlCommand.ToString(), 
				arParams);
		
		<% } %>
	
		}
	}
}

<script runat="template">

public string GetClassName()
{
	//if (SourceTable.Name.EndsWith("s"))
	//{
	//	return RemovePrefix(SourceTable.Name.Substring(0,SourceTable.Name.Length -1));
	//}
	//else
	//{
		return RemovePrefix(SourceTable.Name);
	//}
}

public string GetTableName(string TableName) 
{
	return TableName.ToLower();
	
}

public string GetColumnName(string ColumnName) 
{
	return ColumnName.ToLower();
	
}
	
	
public string GetSqlParamSize(ColumnSchema column)
{
	string Result = "";
	
	switch(GetSqlDbType(column))
	{	//TODO more data types
		case "VarChar" :
		
		Result = ", " + column.Size;
		
		return Result;
		
		
	}
	
	
	return Result;

}

public string RemovePrefix(string TableName)
{

	return TableName.Replace(TablePrefix,"");
}

public string GetParamName(String columnName)
{
	if(columnName == "ID")
			return "id";
			
	string firstLetter = columnName.Substring(0,1).ToLower();
	string Result = firstLetter + columnName.Remove(0,1);
	
	return Result;
}

public string GetParamValue(ColumnSchema column)
{
	if(column.NativeType.Trim().ToLower() == "uniqueidentifier")
	{
		return GetParamName(column.Name) + ".ToString()";
	}
	
	return GetParamName(column.Name);


}


public string GetNpgsqlDbType(ColumnSchema column) {
//column.NativeType.Trim().ToLower()
	switch (column.NativeType.Trim().ToLower())
	{
		case "bigint":
			return "Bigint";
		case "binary":
			return "Bytea";
		case "bit":
		case "boolean":
			return "Boolean";
		case "bstr":
			return "Bytea";
		case "chapter":
			return "Integer";
		case "char":
			return "Text," + column.Size;
		case "currency":
			return "Money";
		case "date":
		case "dbdate":
			return "Date";
		case "dbtime":
			return "Time";
		case "datetime":
		case "dbtimestamp":
			return "Timestamp";
		case "decimal":
			return "Numeric";
		case "double":
		case "float":
			return "Double";
		case "empty":
			return "Text";
		case "error":
			return "Integer";
		case "filetime":
			return "Timestamp";
		case "guid":
			return "Text";
		case "image":
			return "Bytea";
		case "int":
		case "integer":
			return "Integer";
		case "longvarbinary":
		case "longvarchar":
		case "longvarwchar":
			return "Text";
		case "money":
			return "Money";
		case "nchar":
			return "Text," + column.Size;
		case "ntext":
			return "Text";
		case "numeric":
			return "Numeric";
		case "nvarchar":
			if(column.Size == -1) { return "Text";}
			return "Varchar," + column.Size;
		case "propvariant":
			return "Text";
		case "real":
			return "real";
		case "single":
			return "Double";
		case "smalldatetime":
			return "Timestamp";
		case "smallint":
			return "Smallint";
		case "smallmoney":
			return "Money";
		case "sql_variant":
			return "Text";
		case "sysname":
			return "Text";
		case "text":
			return "Text";
		case "timestamp":
			return "Timestamp";
		case "tinyint":
			return "Smallint";
		case "uniqueidentifier":
			return "Char, 36";
		case "unsignedbigint":
			return "Bigint";
		case "unsignedsmallint":
			return "Smallint";
		case "unsignedtinyint":
			return "Smallint";
		case "varchar":
			return "Text," + column.Size;
		case "varbinary":
		case "varwchar": 
		case "wchar": 
			return "Text";
		case "userdefined": 
		default: 
			throw new ApplicationException("SourceTable does not contain a primary key.");
	}
}

public string GetColumnDimensions(ColumnSchema column) {
	string retVal = "";
	switch (column.DataType)
	{
		case DbType.Decimal:
		{
			retVal = "(" + column.Precision + ", " + column.Scale + ")";
			break;
		}
		case DbType.AnsiString:
		case DbType.AnsiStringFixedLength:
		case DbType.String:
		case DbType.StringFixedLength:
		{
			if (column.NativeType != "text" && column.NativeType != "ntext")
			{
				if (column.Size > 0)
				{
					retVal = "(" + column.Size + ")";
				}
			}
			break;
		}
	}
	return retVal;
}

</script>