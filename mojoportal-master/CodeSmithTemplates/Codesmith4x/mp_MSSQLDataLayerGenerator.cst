<%-- 
Name:  					C# DataLayer Methods for MS SQL using SqlHelper
Author: 				Joe Developer
Created:				2004-10-05
Last Modified:			2009-02-23
Description: 			Generates C# a Static Data Layer class for MS SQL

--%>
<%@ CodeTemplate Language="C#" TargetLanguage="C#" Src="" Inherits="CodeSmith.BaseTemplates.SqlCodeTemplate" Debug="False" Description="Template description here." %>
<%@ Property Name="SourceTable" Type="SchemaExplorer.TableSchema" Category="Context" Description="Table that the object is based on." %>
<%@ Property Name="Author" Type="System.String" Default="Joe Developer" Category="Style" Description="Author" %>


<%@ Property Name="DataLayerNameSpace" Type="System.String" Default="mojoPortal.Data" Category="Style" Description="The Namespace of the Data Layer class" %>
<%@ Property Name="UseSubSonic" Type="System.Boolean" Default="False" Category="Options" Description="If true methods will delegate the work to SubSonic methods in the designated Common namespace" %>
<%@ Property Name="SubSonicDataLayerNameSpace" Type="System.String" Default="mojoPortal.Data.Common" Category="Style" Description="The Namespace of the Data Layer class" %>

<%@ Property Name="TablePrefix" Type="System.String" Default="mp_" Category="Style" Description="Table Prfix" %>

<%@ Assembly Name="CodeSmith.BaseTemplates" %>
<%@ Assembly Name="System.Data" %>
<%@ Assembly Name="SchemaExplorer" %>
<%@ Import Namespace="SchemaExplorer" %>
<%@ Import Namespace="System.Data" %>
<%@ Import Namespace="CodeSmith.BaseTemplates" %>

<% ColumnSchema primaryKey = SourceTable.PrimaryKey.MemberColumns[0]; %>
<% if (SourceTable.PrimaryKey == null) throw new ApplicationException("SourceTable does not contain a primary key."); %>
// Author:					<%= Author %>
// Created:					<%= DateTime.Now.Year.ToString() %>-<%= DateTime.Now.Month.ToString() %>-<%= DateTime.Now.Day.ToString() %>
// Last Modified:			<%= DateTime.Now.Year.ToString() %>-<%= DateTime.Now.Month.ToString() %>-<%= DateTime.Now.Day.ToString() %>
// 
// The use and distribution terms for this software are covered by the 
// Common Public License 1.0 (http://opensource.org/licenses/cpl.php)  
// which can be found in the file CPL.TXT at the root of this distribution.
// By using this software in any fashion, you are agreeing to be bound by 
// the terms of this license.
//
// You must not remove this notice, or any other, from this software.

using System;
using System.IO;
using System.Text;
using System.Data;
using System.Data.Common;
using System.Data.SqlClient;
using System.Configuration;
using mojoPortal.Data;
<% if (UseSubSonic) {  %>
using Common = <%= SubSonicDataLayerNameSpace%>;
<% } %>
	
namespace <%= DataLayerNameSpace %>
{
	
	public static class DB<%= GetClassName() %>
    {

<% if (primaryKey.DataType == DbType.Guid) {  %>

		<%="///" %> <summary>
		<%="///" %> Inserts a row in the <%= SourceTable.Name %> table. Returns rows affected count.
		<%="///" %> </summary>
		<% for (int i = 0; i < SourceTable.Columns.Count; i++) { %>
		<%="///" %> <param name="<%= GetParamName(SourceTable.Columns[i].Name) %>"> <%= GetParamName(SourceTable.Columns[i].Name) %> </param>
				<% } %>
		/// <returns>int</returns>
		public static int Create(
		<% for (int i = 0; i < SourceTable.Columns.Count; i++) { %>
			<%= GetCSharpVariableType(SourceTable.Columns[i]) %> <%= GetParamName(SourceTable.Columns[i].Name) %><% if (i < SourceTable.Columns.Count - 1) { %>, <% }else{ %>) <% } %>
				<% } %>
		{
		<% if(UseSubSonic) { %>
			return Common.DB<%= GetClassName() %>.Create(
					<% for (int i = 0; i < SourceTable.Columns.Count; i++) { %>
						<%= GetParamName(SourceTable.Columns[i].Name) %><% if (i < SourceTable.Columns.Count - 1) { %>, <% }else{ %>); <% } %>
				<% } %>
		
	<% } else { //don't use SubSonic %>
			SqlParameterHelper sph = new SqlParameterHelper(ConnectionString.GetWriteConnectionString(), "<%= SourceTable.Name %>_Insert", <%= SourceTable.Columns.Count%>);
		<% for (int i = 0; i < SourceTable.Columns.Count; i++) { %>
			sph.DefineSqlParameter("@<%= SourceTable.Columns[i].Name %>", SqlDbType.<%= GetSqlDbType(SourceTable.Columns[i]) %><%= GetSqlParamSize(SourceTable.Columns[i]) %>, ParameterDirection.Input, <%= GetParamName(SourceTable.Columns[i].Name) %>);
		<% } %>	
			int rowsAffected = sph.ExecuteNonQuery();
			return rowsAffected;
			
	<% } %>	
		}

<% } else { %>

		<%="///" %> <summary>
		<%="///" %> Inserts a row in the <%= SourceTable.Name %> table. Returns new integer id.
		<%="///" %> </summary>
		<% for (int i = 0; i < SourceTable.NonPrimaryKeyColumns.Count; i++) { %>
		<%="///" %> <param name="<%= GetParamName(SourceTable.NonPrimaryKeyColumns[i].Name) %>"> <%= GetParamName(SourceTable.NonPrimaryKeyColumns[i].Name) %> </param>
				<% } %>
		/// <returns>int</returns>
		public static int Create(
		<% for (int i = 0; i < SourceTable.NonPrimaryKeyColumns.Count; i++) { %>
			<%= GetCSharpVariableType(SourceTable.NonPrimaryKeyColumns[i]) %> <%= GetParamName(SourceTable.NonPrimaryKeyColumns[i].Name) %><% if (i < SourceTable.NonPrimaryKeyColumns.Count - 1) { %>, <% }else{ %>) <% } %>
				<% } %>
		{
		<% if(UseSubSonic) { %>
			return Common.DB<%= GetClassName() %>.Create(
			<% for (int i = 0; i < SourceTable.NonPrimaryKeyColumns.Count; i++) { %>
				<%= GetParamName(SourceTable.NonPrimaryKeyColumns[i].Name) %><% if (i < SourceTable.NonPrimaryKeyColumns.Count - 1) { %>, <% }else{ %>); <% } %>
		<% } %>
	
	<% } else { //don't use SubSonic %>
			SqlParameterHelper sph = new SqlParameterHelper(ConnectionString.GetWriteConnectionString(), "<%= SourceTable.Name %>_Insert", <%= SourceTable.NonPrimaryKeyColumns.Count%>);
		<% for (int i = 0; i < SourceTable.NonPrimaryKeyColumns.Count; i++) { %>
			sph.DefineSqlParameter("@<%= SourceTable.NonPrimaryKeyColumns[i].Name %>", SqlDbType.<%= GetSqlDbType(SourceTable.NonPrimaryKeyColumns[i]) %><%= GetSqlParamSize(SourceTable.NonPrimaryKeyColumns[i]) %>, ParameterDirection.Input, <%= GetParamName(SourceTable.NonPrimaryKeyColumns[i].Name) %>);
		<% } %>	
			int newID = Convert.ToInt32(sph.ExecuteScalar());
			return newID;
	<% } %>
		}

<% } %>

		<%="///" %> <summary>
		<%="///" %> Updates a row in the <%= SourceTable.Name %> table. Returns true if row updated.
		<%="///" %> </summary>
		<% for (int i = 0; i < SourceTable.Columns.Count; i++) { %>
		<%="///" %> <param name="<%= GetParamName(SourceTable.Columns[i].Name) %>"> <%= GetParamName(SourceTable.Columns[i].Name) %> </param>
				<% } %>
		/// <returns>bool</returns>
		public static bool Update(
			<% for (int i = 0; i < SourceTable.PrimaryKey.MemberColumns.Count; i++) { %>
			<%= GetCSharpVariableType(SourceTable.PrimaryKey.MemberColumns[i]) %>  <%= GetParamName(SourceTable.PrimaryKey.MemberColumns[i].Name) %>,<% } %> 
			<% for (int i = 0; i < SourceTable.NonPrimaryKeyColumns.Count; i++) { %>
			<%= GetCSharpVariableType(SourceTable.NonPrimaryKeyColumns[i]) %> <%= GetParamName(SourceTable.NonPrimaryKeyColumns[i].Name) %><% if (i < SourceTable.NonPrimaryKeyColumns.Count - 1) { %>, <% }else{ %>) <% } %>
			<% } %>
		{
		<% if(UseSubSonic) { %>
			return Common.DB<%= GetClassName() %>.Update(
			<% for (int i = 0; i < SourceTable.Columns.Count; i++) { %>
				<%= GetParamName(SourceTable.Columns[i].Name) %><% if (i < SourceTable.Columns.Count - 1) { %>, <% }else{ %>); <% } %>
		<% } %>
		
		<%}else{ //dont use SubSonic %>
			SqlParameterHelper sph = new SqlParameterHelper(ConnectionString.GetWriteConnectionString(), "<%= SourceTable.Name %>_Update", <%= SourceTable.PrimaryKey.MemberColumns.Count + SourceTable.NonPrimaryKeyColumns.Count%>);
		<% for (int i = 0; i < SourceTable.Columns.Count; i++) { %>
			sph.DefineSqlParameter("@<%= SourceTable.Columns[i].Name %>", SqlDbType.<%= GetSqlDbType(SourceTable.Columns[i]) %><%= GetSqlParamSize(SourceTable.Columns[i]) %>, ParameterDirection.Input, <%= GetParamName(SourceTable.Columns[i].Name) %>);
		<% } %>	
			int rowsAffected = sph.ExecuteNonQuery();
			return (rowsAffected > 0);
			
		<% } %>
		}
		
		<%="///" %> <summary>
		<%="///" %> Deletes a row from the <%= SourceTable.Name %> table. Returns true if row deleted.
		<%="///" %> </summary>
		<% for (int i = 0; i < SourceTable.PrimaryKey.MemberColumns.Count; i++) { %>
		<%="///" %> <param name="<%= GetParamName(SourceTable.PrimaryKey.MemberColumns[i].Name) %>"> <%= GetParamName(SourceTable.PrimaryKey.MemberColumns[i].Name) %> </param>
				<% } %>
		/// <returns>bool</returns>
		public static bool Delete(
			<% for (int i = 0; i < SourceTable.PrimaryKey.MemberColumns.Count; i++) { %>
			<%= GetCSharpVariableType(SourceTable.PrimaryKey.MemberColumns[i]) %> <%= GetParamName(SourceTable.PrimaryKey.MemberColumns[i].Name) %><% if (i < SourceTable.PrimaryKey.MemberColumns.Count - 1) { %>, <% }else{ %>)<% } %><% } %> 
		{
		<% if(UseSubSonic) { %>
			return Common.DB<%= GetClassName() %>.Delete(
			<% for (int i = 0; i < SourceTable.PrimaryKey.MemberColumns.Count; i++) { %>
				<%= GetParamName(SourceTable.PrimaryKey.MemberColumns[i].Name) %><% if (i < SourceTable.PrimaryKey.MemberColumns.Count - 1) { %>, <% }else{ %>); <% } %>
		<% } %>
	
	<%}else{ //dont use SubSonic %>
			SqlParameterHelper sph = new SqlParameterHelper(ConnectionString.GetWriteConnectionString(), "<%= SourceTable.Name %>_Delete", <%= SourceTable.PrimaryKey.MemberColumns.Count%>);
		<% for (int i = 0; i < SourceTable.PrimaryKey.MemberColumns.Count; i++) { %>
			sph.DefineSqlParameter("@<%= SourceTable.PrimaryKey.MemberColumns[i].Name %>", SqlDbType.<%= GetSqlDbType(SourceTable.PrimaryKey.MemberColumns[i]) %><%= GetSqlParamSize(SourceTable.PrimaryKey.MemberColumns[i]) %>, ParameterDirection.Input, <%= GetParamName(SourceTable.PrimaryKey.MemberColumns[i].Name) %>);
		<% } %>	
			int rowsAffected = sph.ExecuteNonQuery();
			return (rowsAffected > 0);
			
	<% } %>
		}
		
		<%="///" %> <summary>
		<%="///" %> Gets an IDataReader with one row from the <%= SourceTable.Name %> table.
		<%="///" %> </summary>
		<% for (int i = 0; i < SourceTable.PrimaryKey.MemberColumns.Count; i++) { %>
		<%="///" %> <param name="<%= GetParamName(SourceTable.PrimaryKey.MemberColumns[i].Name) %>"> <%= GetParamName(SourceTable.PrimaryKey.MemberColumns[i].Name) %> </param>
				<% } %>
		public static IDataReader GetOne(
		<% for (int i = 0; i < SourceTable.PrimaryKey.MemberColumns.Count; i++) { %>
			<%= GetCSharpVariableType(SourceTable.PrimaryKey.MemberColumns[i]) %>  <%= GetParamName(SourceTable.PrimaryKey.MemberColumns[i].Name) %><% if (i < SourceTable.PrimaryKey.MemberColumns.Count - 1) { %>, <% }else{ %>)<% } %><% } %>  
		{
		<% if(UseSubSonic) { %>
			return Common.DB<%= GetClassName() %>.GetOne(
			<% for (int i = 0; i < SourceTable.PrimaryKey.MemberColumns.Count; i++) { %>
				<%= GetParamName(SourceTable.PrimaryKey.MemberColumns[i].Name) %><% if (i < SourceTable.PrimaryKey.MemberColumns.Count - 1) { %>, <% }else{ %>); <% } %>
		<% } %>
	<%}else{ //dont use SubSonic %>
			SqlParameterHelper sph = new SqlParameterHelper(ConnectionString.GetReadConnectionString(), "<%= SourceTable.Name %>_SelectOne", <%= SourceTable.PrimaryKey.MemberColumns.Count%>);
		<% for (int i = 0; i < SourceTable.PrimaryKey.MemberColumns.Count; i++) { %>
			sph.DefineSqlParameter("@<%= SourceTable.PrimaryKey.MemberColumns[i].Name %>", SqlDbType.<%= GetSqlDbType(SourceTable.PrimaryKey.MemberColumns[i]) %><%= GetSqlParamSize(SourceTable.PrimaryKey.MemberColumns[i]) %>, ParameterDirection.Input, <%= GetParamName(SourceTable.PrimaryKey.MemberColumns[i].Name) %>);
		<% } %>	
			return sph.ExecuteReader();
			
	<% } %>	
		}
		
		/// <summary>
		/// Gets a count of rows in the <%= SourceTable.Name %> table.
		/// </summary>
		public static int GetCount()
		{
			
			return Convert.ToInt32(SqlHelper.ExecuteScalar(
				ConnectionString.GetReadConnectionString(),
				CommandType.StoredProcedure,
				"<%= SourceTable.Name %>_GetCount",
				null));
	
		}
		
		/// <summary>
		/// Gets an IDataReader with all rows in the <%= SourceTable.Name %> table.
		/// </summary>
		public static IDataReader GetAll()
		{
			
			return SqlHelper.ExecuteReader(
				ConnectionString.GetReadConnectionString(),
				CommandType.StoredProcedure,
				"<%= SourceTable.Name %>_SelectAll",
				null);
	
		}
		
		/// <summary>
		/// Gets a page of data from the <%= SourceTable.Name %> table.
		/// </summary>
		/// <param name="pageNumber">The page number.</param>
		/// <param name="pageSize">Size of the page.</param>
		/// <param name="totalPages">total pages</param>
		public static IDataReader GetPage(
			int pageNumber, 
			int pageSize,
			out int totalPages)
		{
			totalPages = 1;
			int totalRows
				= GetCount();
				
			if (pageSize > 0) totalPages = totalRows / pageSize;
		
			if (totalRows <= pageSize)
			{
				totalPages = 1;
			}
			else
			{
				int remainder;
				Math.DivRem(totalRows, pageSize, out remainder);
				if (remainder > 0)
				{
					totalPages += 1;
				}
			}
			
			SqlParameterHelper sph = new SqlParameterHelper(ConnectionString.GetReadConnectionString(), "<%= SourceTable.Name %>_SelectPage", 2);
			sph.DefineSqlParameter("@PageNumber", SqlDbType.Int, ParameterDirection.Input, pageNumber);
			sph.DefineSqlParameter("@PageSize", SqlDbType.Int, ParameterDirection.Input, pageSize);
			return sph.ExecuteReader();
		
		}
	
	}

}


<script runat="template">

public string GetClassName()
	{
		//if (SourceTable.Name.EndsWith("s"))
		//{
		//	return RemovePrefix(SourceTable.Name.Substring(0,SourceTable.Name.Length -1));
		//}
		//else
		//{
			return RemovePrefix(SourceTable.Name);
		//}
	}

	public string RemovePrefix(string TableName)
	{
	
		return TableName.Replace(TablePrefix,"");
	}
	
	public string GetPrivateName(string ColumnName)
	{
		
	
		return ColumnName.Substring(0,1).ToLower() + ColumnName.Substring(1,ColumnName.Length -1);
	}
	
	public string GetParamName(String columnName)
	{
		if(columnName == "ID")
			return "id";
		
		string firstLetter = columnName.Substring(0,1).ToLower();
		string Result = firstLetter + columnName.Remove(0,1);
		
		return Result;
	}
	
	public string GetReaderConversion(ColumnSchema column)
	{
		if (column.Name.EndsWith("TypeCode")) return column.Name;
		
		switch (column.DataType)
		{
			case DbType.AnsiString: return "reader[\"" + column.Name + "\"].ToString();";
			case DbType.AnsiStringFixedLength: return "reader[\"" + column.Name + "\"].ToString();";
			case DbType.Binary: return "Byte[]";
			case DbType.Boolean: return "Convert.ToBoolean(reader[\"" + column.Name + "\"]);";
			case DbType.Byte: return "Convert.ToByte(reader[\"" + column.Name + "\"]);";
			case DbType.Currency: return "Convert.ToDecimal(reader[\"" + column.Name + "\"]);";
			case DbType.Date: return "Convert.ToDateTime(reader[\"" + column.Name + "\"]);";
			case DbType.DateTime: return "Convert.ToDateTime(reader[\"" + column.Name + "\"]);";
			case DbType.Decimal: return "Convert.ToDecimal(reader[\"" + column.Name + "\"]);";
			case DbType.Double: return "Convert.ToDouble(reader[\"" + column.Name + "\"]);";
			case DbType.Guid: return "new Guid(reader[\"" + column.Name + "\"].ToString());";
			case DbType.Int16: return "Convert.ToInt16(reader[\"" + column.Name + "\"]);";
			case DbType.Int32: return "Convert.ToInt32(reader[\"" + column.Name + "\"]);";
			case DbType.Int64: return "Convert.ToInt64(reader[\"" + column.Name + "\"]);";
			case DbType.SByte: return "Convert.ToSByte(reader[\"" + column.Name + "\"]);";
			case DbType.Single: return "Convert.ToSingle(reader[\"" + column.Name + "\"]);";
			case DbType.String: return "reader[\"" + column.Name + "\"].ToString();";
			case DbType.StringFixedLength: return "reader[\"" + column.Name + "\"].ToString();";
			
			default:
			{
				return "__UNKNOWN__" + column.NativeType;
			}
		}
	}
	
	public string GetSqlParamSize(ColumnSchema column)
	{
		string Result = "";
		
		switch(GetSqlDbType(column))
		{	//TODO more data types
			case "VarChar" :
			case "NVarChar" :
			case "Char" :
			case "NChar" :
			
			Result = ", " + column.Size;
			
			return Result;
			
			
		}
		
		
		return Result;
	
	}

	public string GetVBDataType(ColumnSchema column)
	{
		if (column.Name.EndsWith("TypeCode")) return column.Name;
		
		switch (column.DataType)
		{
			case DbType.AnsiString: return "String";
			case DbType.AnsiStringFixedLength: return "String";
			case DbType.Binary: return "Byte()";
			case DbType.Boolean: return "Boolean";
			case DbType.Byte: return "Byte";
			case DbType.Currency: return "Decimal";
			case DbType.Date: return "DateTime";
			case DbType.DateTime: return "DateTime";
			case DbType.Decimal: return "Decimal";
			case DbType.Double: return "Double";
			case DbType.Guid: return "Guid";
			case DbType.Int16: return "Short";
			case DbType.Int32: return "Integer";
			case DbType.Int64: return "Long";
			case DbType.Object: return "Object";
			case DbType.SByte: return "SByte";
			case DbType.Single: return "Float";
			case DbType.String: return "String";
			case DbType.StringFixedLength: return "String";
			case DbType.Time: return "TimeSpan";
			case DbType.UInt16: return "UShort";
			case DbType.UInt32: return "UInt";
			case DbType.UInt64: return "ULong";
			case DbType.VarNumeric: return "Decimal";
			default:
			{
				return "__UNKNOWN__" + column.NativeType;
			}
		}
	}
	
</script>