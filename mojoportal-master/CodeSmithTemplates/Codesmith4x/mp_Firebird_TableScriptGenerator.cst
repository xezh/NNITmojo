<%-- 
Name:  						Firebird Table Generator
Author: 					Joe Developer
Created:					2007-07-18
Last Modified:				2008-09-12
Description: 				Creates table script for Firebird based on MS SQL Schema

--%>
<%@ CodeTemplate Language="C#" TargetLanguage="T-SQL" Src="" Inherits="CodeSmith.BaseTemplates.SqlCodeTemplate" Debug="False" Description="Template description here." %>

<%@ Property Name="SourceTable" Type="SchemaExplorer.TableSchema" Category="Context" Description="Table that the object is based on." %>
<%@ Property Name="CreateTriggerForAutoSequence" Type="System.Boolean" Default="False" Category="Options" Description="If true, interger primary key columns will have a trigger created to automatically get new ids from the sequence." %>
<%@ Property Name="TablePrefix" Type="System.String" Default="MP_" Category="Style" Description="Table Prfix" %>

<%@ Assembly Name="CodeSmith.BaseTemplates" %>
<%@ Assembly Name="System.Data" %>
<%@ Assembly Name="SchemaExplorer" %>
<%@ Import Namespace="SchemaExplorer" %>
<%@ Import Namespace="System.Data" %>
<%@ Import Namespace="CodeSmith.BaseTemplates" %>

<% if (SourceTable.PrimaryKey.MemberColumns.Count >= 1 
&& (SourceTable.PrimaryKey.MemberColumns[0].DataType == DbType.Guid 
|| SourceTable.PrimaryKey.MemberColumns[0].DataType == DbType.Int16 
|| SourceTable.PrimaryKey.MemberColumns[0].DataType == DbType.Int32 
|| SourceTable.PrimaryKey.MemberColumns[0].DataType == DbType.Int64
|| SourceTable.PrimaryKey.MemberColumns[0].DataType == DbType.String
)) {
    ColumnSchema primaryKey = SourceTable.PrimaryKey.MemberColumns[0];
%>

<% if (primaryKey.DataType == DbType.Guid) {  %>

-- thie generation script doesn't create default values for non null columns so be sure and add those as appropriate
CREATE TABLE <%= SourceTable.Name %> (
<% for (int i = 0; i < SourceTable.PrimaryKey.MemberColumns.Count; i++) { %>
 <%= SourceTable.Columns[i].Name %> <%= GetColumnTypeWithDimensions(SourceTable.PrimaryKey.MemberColumns[i]) %> <%= GetNullStatement(SourceTable.PrimaryKey.MemberColumns[i]) %>, <% }  %>
<% for (int i = 0; i < SourceTable.NonPrimaryKeyColumns.Count; i++) { %>
 <%= SourceTable.NonPrimaryKeyColumns[i].Name %> <%= GetColumnTypeWithDimensions(SourceTable.NonPrimaryKeyColumns[i]) %> <%= GetNullStatement(SourceTable.NonPrimaryKeyColumns[i]) %>,
  <% } %>
<% for (int i = 0; i < SourceTable.PrimaryKey.MemberColumns.Count; i++) {  %>
 PRIMARY KEY (<%= SourceTable.PrimaryKey.MemberColumns[i].Name %>)   
     <% } %>
);
	
<% } else { %>

-- thie generation script doesn't create default values for non null columns so be sure and add those as appropriate
CREATE TABLE <%= SourceTable.Name %> (
<% for (int i = 0; i < SourceTable.PrimaryKey.MemberColumns.Count; i++) { %>
 <%= SourceTable.Columns[i].Name %> <%= GetColumnTypeWithDimensions(SourceTable.PrimaryKey.MemberColumns[i]) %> <%= GetNullStatement(SourceTable.PrimaryKey.MemberColumns[i]) %> , <% }  %>
<% for (int i = 0; i < SourceTable.NonPrimaryKeyColumns.Count; i++) { %>
 <%= SourceTable.NonPrimaryKeyColumns[i].Name %> <%= GetColumnTypeWithDimensions(SourceTable.NonPrimaryKeyColumns[i]) %> <%= GetNullStatement(SourceTable.NonPrimaryKeyColumns[i]) %>,
  <% } %>
PRIMARY KEY (<% for (int i = 0; i < SourceTable.PrimaryKey.MemberColumns.Count; i++) {  %><%= SourceTable.PrimaryKey.MemberColumns[i].Name %><% if (i < SourceTable.PrimaryKey.MemberColumns.Count - 1) { %>,<% } %><% } %>)
);

CREATE SEQUENCE <%= SourceTable.Name %>_seq;

<% if (CreateTriggerForAutoSequence) { %>
SET TERM ^ ;
CREATE TRIGGER <%= SourceTable.Name %>_bi FOR <%= SourceTable.Name %>
ACTIVE BEFORE INSERT POSITION 0
AS
BEGIN
<% for (int i = 0; i < SourceTable.PrimaryKey.MemberColumns.Count; i++) { %>
IF (NEW.<%= SourceTable.Columns[i].Name %>  IS NULL) THEN
 NEW.<%= SourceTable.Columns[i].Name %>  = NEXT VALUE FOR <%= SourceTable.Name %>_seq;
 <% }  %>
END^
SET TERM ; ^
<% }  %>

<% for (int i = 0; i < SourceTable.ForeignKeys.Count; i++) {  %>
alter table <%= SourceTable.Name.ToUpper() %>
add constraint FK_<%= RemovePrefix(SourceTable.Name.ToUpper()) %>_<%= RemovePrefix(SourceTable.ForeignKeys[i].PrimaryKeyTable.Name.ToUpper()) %> 
foreign key(<%= SourceTable.ForeignKeyColumns[i].Name.ToUpper() %>)
references <%= SourceTable.ForeignKeys[i].PrimaryKeyTable.Name.ToUpper() %>(<%= SourceTable.ForeignKeyColumns[i].Name.ToUpper() %>); 

CREATE INDEX IDX_<%= RemovePrefix(SourceTable.Name.ToUpper()) %>_<%= SourceTable.ForeignKeyColumns[i].Name.ToUpper() %> ON <%= SourceTable.Name.ToUpper() %>(<%= SourceTable.ForeignKeyColumns[i].Name.ToUpper() %>);
            
			<% } %>

	
<% } %>


<% } else { 
%>

-- there is a problem generating this table script
-- this generator only works with tables having a single field primary key, either int or varchar(36) to represent a guid
-- if the single column pk is an int it will create a sequence for the autogeneration of int primary keys



<% } %>


<script runat="template">

public string GetColumnTypeWithDimensions(ColumnSchema column) {
	return GetMySqlDbType(column) + GetColumnDimensions(column);
}

public string RemovePrefix(string TableName)
{

	return TableName.Replace(TablePrefix,"");
}


public string GetNullStatement(ColumnSchema column)
{
	if(column.AllowDBNull)
	{
		return "";
	}
	
	return "NOT NULL";

}

public string GetMySqlDbType(ColumnSchema column)
{
	switch(GetSqlDbType(column))
	{
		case "Bit" :
		return "SMALLINT";
		
		case "Text" :
		return "BLOB SUB_TYPE 1";
		
		case "NText" :
		return "BLOB SUB_TYPE 1";
		
		case "NVarChar" :
		return "VARCHAR";
		
		case "VarChar" :
		return "VARCHAR";
		
		case "NChar" :
		return "CHAR";
		
		case "Image" :
		return "BLOB";
		
		case "Int" :
		return "INTEGER";
		
		case "DateTime" :
		return "TIMESTAMP";
		
		case "SmallDateTime" :
		return "TIME";
		
		case "UniqueIdentifier" :
		return "VARCHAR(36)";
		
		case "Money" :
		return "DECIMAL(18,4)";
		
		
	}
	
	return GetSqlDbType(column);

}

public string GetColumnDimensions(ColumnSchema column)
{
	switch(GetSqlDbType(column))
	{
		case "VarChar" :
		case "VARCHAR" :
		case "Char" :
		case "NVarChar" :
		case "NChar" :
		case "DECIMAL" :
		
		return "(" + column.Size.ToString() + ")";
		
	}
	
	return "";



}

</script>