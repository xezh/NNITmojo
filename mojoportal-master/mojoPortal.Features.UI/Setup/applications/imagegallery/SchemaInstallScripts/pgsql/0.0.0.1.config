
CREATE SEQUENCE mp_galleryimages_itemid_seq
    INCREMENT BY 1
    NO MAXVALUE
    NO MINVALUE
    CACHE 1;

CREATE TABLE mp_galleryimages (
    itemid integer DEFAULT nextval(('"mp_galleryimages_itemid_seq"'::text)::regclass) NOT NULL,
    moduleid integer NOT NULL,
    displayorder integer DEFAULT 100 NOT NULL,
    caption character varying(255),
    description text,
    metadataxml text,
    imagefile character varying(100),
    webimagefile character varying(100),
    thumbnailfile character varying(100),
    uploaddate timestamp without time zone DEFAULT ('now'::text)::timestamp(3) with time zone NOT NULL,
    uploaduser character varying(100),
    itemguid character varying(36),
    moduleguid character varying(36),
    userguid character varying(36)
);


CREATE TYPE mp_galleryimages_select_type AS (
	itemid integer,
	moduleid integer,
	displayorder integer,
	caption character varying(255),
	description text,
	metadataxml text,
	imagefile character varying(100),
	webimagefile character varying(100),
	thumbnailfile character varying(100),
	uploaddate timestamp without time zone,
	uploaduser character varying(100)
);


CREATE TYPE mp_galleryimages_selectbypage_type AS (
	itemid integer,
	moduleid integer,
	caption character varying(255),
	description text,
	moduletitle character varying(255),
	featurename character varying(255)
);



CREATE TYPE mp_galleryimages_selectone_type AS (
	itemid integer,
	moduleid integer,
	displayorder integer,
	caption character varying(255),
	description text,
	metadataxml text,
	imagefile character varying(100),
	webimagefile character varying(100),
	thumbnailfile character varying(100),
	uploaddate timestamp without time zone,
	uploaduser character varying(100),
	itemguid character(36),
	moduleguid character(36),
	userguid character(36)
);


CREATE TYPE mp_galleryimages_selectthumbsbypage_type AS (
	itemid integer,
	caption character varying(255),
	thumbnailfile character varying(100),
	webimagefile character varying(100),
	indexid integer,
	totalpages integer
);



CREATE TYPE mp_galleryimages_selectwebimagebypage_type AS (
	moduleid integer,
	itemid integer,
	totalpages integer
);




CREATE TYPE mp_mp_galleryimages_selectall_type AS (
	itemid integer,
	moduleid integer,
	displayorder integer,
	caption character varying(255),
	description text,
	imagefile character varying(100),
	webimagefile character varying(100),
	thumbnailfile character varying(100),
	uploaddate timestamp without time zone,
	uploaduser character varying(100)
);



CREATE TYPE mp_mp_galleryimages_selectone_type AS (
	itemid integer,
	moduleid integer,
	displayorder integer,
	caption character varying(255),
	description text,
	metadataxml text,
	imagefile character varying(100),
	webimagefile character varying(100),
	thumbnailfile character varying(100),
	uploaddate timestamp without time zone,
	uploaduser character varying(100)
);


CREATE FUNCTION mp_galleryimages_delete(integer) RETURNS integer
    AS $_$
declare
	_itemid alias for $1;
	_rowcount int4;
begin

	delete from  mp_galleryimages
where
	itemid = _itemid; 
GET DIAGNOSTICS _rowcount = ROW_COUNT;
return _rowcount;
end$_$
    LANGUAGE plpgsql SECURITY DEFINER;



CREATE FUNCTION mp_galleryimages_insert(integer, integer, character varying, text, text, character varying, character varying, character varying, timestamp without time zone, character varying) RETURNS integer
    AS $_$
insert into 	mp_galleryimages
(
				moduleid,
				displayorder,
				caption,
				description,
				metadataxml,
				imagefile,
				webimagefile,
				thumbnailfile,
				uploaddate,
				uploaduser
) 
values 
(
				$1,
				$2,
				$3,
				$4,
				$5,
				$6,
				$7,
				$8,
				$9,
				$10
				
);
select cast(currval('mp_galleryimages_itemid_seq') as int4);; $_$
    LANGUAGE sql SECURITY DEFINER;



CREATE FUNCTION mp_galleryimages_insert(integer, integer, character varying, text, text, character varying, character varying, character varying, timestamp without time zone, character varying, character varying, character varying, character varying) RETURNS integer
    AS $_$
insert into 	mp_galleryimages
(
				moduleid,
				displayorder,
				caption,
				description,
				metadataxml,
				imagefile,
				webimagefile,
				thumbnailfile,
				uploaddate,
				uploaduser,
				itemguid,
				moduleguid,
				userguid
) 
values 
(
				$1,
				$2,
				$3,
				$4,
				$5,
				$6,
				$7,
				$8,
				$9,
				$10,
				$11,
				$12,
				$13
				
);
select cast(currval('mp_galleryimages_itemid_seq') as int4);; $_$
    LANGUAGE sql SECURITY DEFINER;



CREATE FUNCTION mp_galleryimages_select(integer) RETURNS SETOF mp_galleryimages_select_type
    AS $_$
select
		itemid,
		moduleid,
		displayorder,
		caption,
		description,
		metadataxml,
		imagefile,
		webimagefile,
		thumbnailfile,
		uploaddate,
		uploaduser
		
from
		mp_galleryimages
where	moduleid = $1; $_$
    LANGUAGE sql SECURITY DEFINER;



CREATE FUNCTION mp_galleryimages_selectbypage(integer, integer) RETURNS SETOF mp_galleryimages_selectbypage_type
    AS $_$
select
		gi.itemid,
		gi.moduleid,
		gi.caption,
		gi.description,
		m.moduletitle,
		md.featurename
		
from
		mp_galleryimages gi
		
JOIN		mp_modules m
ON		gi.moduleid = m.moduleid

JOIN		mp_moduledefinitions md
ON		m.moduledefid = md.moduledefid

JOIN		mp_pagemodules pm
ON		pm.moduleid = m.moduleid

JOIN		mp_pages p
ON		p.pageid = pm.pageid
		
where
		p.siteid = $1
		AND pm.pageid = $2
		AND (current_timestamp(3) >= pm.publishbegindate)
		AND ((pm.publishenddate IS NULL) OR (current_timestamp(3) < pm.publishenddate)); $_$
    LANGUAGE sql SECURITY DEFINER;



CREATE FUNCTION mp_galleryimages_selectone(integer) RETURNS SETOF mp_galleryimages_selectone_type
    AS $_$
select
	itemid,
	moduleid,
	displayorder,
	caption,
	description,
	metadataxml,
	imagefile,
	webimagefile,
	thumbnailfile,
	uploaddate,
	uploaduser,
	itemguid,
	moduleguid,
        userguid
		
from
		mp_galleryimages
		
where
		itemid = $1; $_$
    LANGUAGE sql SECURITY DEFINER;




CREATE FUNCTION mp_galleryimages_selectthumbsbypage(integer, integer, integer) RETURNS SETOF mp_galleryimages_selectthumbsbypage_type
    AS $_$
declare
	_moduleid alias for $1;
	_pagenumber alias for $2;
	_pagesize alias for $3;
	 _pagelowerbound int;
	 _pageupperbound int;
	 _totalrows int;
	 _totalpages int;
	 _remainder int;
	_rec mp_galleryimages_selectthumbsbypage_type%ROWTYPE;
	p_index int;

begin

_pagelowerbound := (_pagesize * _pagenumber) - _pagesize;
_pageupperbound := _pagelowerbound + _pagesize + 1;

select into _totalrows  cast(count(*) as int4) 
from	mp_galleryimages t
where  t.moduleid = _moduleid;

_totalpages := _totalrows / _pagesize;

_remainder := _totalrows % _pagesize;

p_index := _pagelowerbound;

if _remainder > 0 then
	_totalpages := _totalpages + 1;
end if; 
for _rec in
	select	
		t.itemid,
		t.caption,
		t.thumbnailfile,
		t.webimagefile,
		p_index as indexid,
		_totalpages as totalpages
	from		mp_galleryimages t
	where	t.moduleid = _moduleid	
	order by	t.displayorder, t.itemid asc
	limit 	_pagesize
	offset _pagelowerbound
loop
	return next _rec;
	p_index := p_index + 1;
end loop;
return;
end$_$
    LANGUAGE plpgsql SECURITY DEFINER;



CREATE FUNCTION mp_galleryimages_selectwebimagebypage(integer, integer) RETURNS SETOF mp_galleryimages_selectwebimagebypage_type
    AS $_$
declare
	_moduleid alias for $1;
	_pagenumber alias for $2;
	 _pagesize 		int;
	 _pagelowerbound 	int;
	 _pageupperbound 	int;
	 _totalrows int;
	 _totalpages int;
	 _remainder int;
	_rec mp_galleryimages_selectwebimagebypage_type%ROWTYPE;
	p_index int;

begin

_pagesize := 1;
_pagelowerbound := (_pagesize * _pagenumber) - _pagesize;
_pageupperbound := _pagelowerbound + _pagesize + 1;

select into _totalrows  cast(count(*) as int4) 
from	mp_galleryimages t
where  t.moduleid = _moduleid;

_totalpages := _totalrows / _pagesize;
_remainder := _totalrows % _pagesize;

if _remainder > 0 then
	_totalpages := _totalpages + 1;
end if;

for _rec in
	select	t.moduleid,
		t.itemid,
            	_totalpages as totalpages
			
			
	from		mp_galleryimages t
	where	t.moduleid = _moduleid	
	order by	t.displayorder, t.itemid asc
    limit 	_pagesize
	offset _pagelowerbound
loop
	return next _rec;
end loop;
return;
end$_$
    LANGUAGE plpgsql SECURITY DEFINER;



CREATE FUNCTION mp_galleryimages_update(integer, integer, integer, character varying, text, text, character varying, character varying, character varying, timestamp without time zone, character varying) RETURNS integer
    AS $_$
declare
	_itemid alias for $1;
	_moduleid alias for $2;
	_displayorder alias for $3;
	_caption alias for $4;
	_description alias for $5;
	_metadataxml alias for $6;
	_imagefile alias for $7;
	_webimagefile alias for $8;
	_thumbnailfile alias for $9;
	_uploaddate alias for $10;
	_uploaduser alias for $11;
	_rowcount int4;
begin

update 		mp_galleryimages 
set
			moduleid = _moduleid,
			displayorder = _displayorder,
			caption = _caption,
			description = _description,
			metadataxml = _metadataxml,
			imagefile = _imagefile,
			webimagefile = _webimagefile,
			thumbnailfile = _thumbnailfile,
			uploaddate = _uploaddate,
			uploaduser = _uploaduser
			
where
			itemid = _itemid; 
GET DIAGNOSTICS _rowcount = ROW_COUNT;
return _rowcount;
end$_$
    LANGUAGE plpgsql SECURITY DEFINER;


ALTER TABLE ONLY mp_galleryimages
    ADD CONSTRAINT pk_galleryimages PRIMARY KEY (itemid);


CREATE INDEX ifk_galleryimages_moduleid ON mp_galleryimages USING btree (moduleid);

