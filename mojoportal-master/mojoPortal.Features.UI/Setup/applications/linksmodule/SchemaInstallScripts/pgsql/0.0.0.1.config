CREATE SEQUENCE mp_links_itemid_seq
    INCREMENT BY 1
    NO MAXVALUE
    NO MINVALUE
    CACHE 1;


CREATE TABLE mp_links (
    itemid integer DEFAULT nextval(('"mp_links_itemid_seq"'::text)::regclass) NOT NULL,
    moduleid integer NOT NULL,
    title character varying(255),
    target character varying(20),
    url character varying(255),
    vieworder integer,
    description text,
    createddate timestamp without time zone,
    createdby integer,
    itemguid character varying(36),
    moduleguid character varying(36),
    userguid character varying(36)
);


CREATE TYPE mp_links_selectbypage_type AS (
	itemid integer,
	moduleid integer,
	title character varying(255),
	description text,
	moduletitle character varying(255),
	featurename character varying(255)
);


CREATE FUNCTION mp_links_delete(integer) RETURNS integer
    AS $_$
declare
	_itemid alias for $1;
	_rowcount int4;
begin

	delete from 
    mp_links
where
    itemid = _itemid; 
GET DIAGNOSTICS _rowcount = ROW_COUNT;
return _rowcount;
end$_$
    LANGUAGE plpgsql SECURITY DEFINER;



CREATE FUNCTION mp_links_insert(integer, character varying, character varying, integer, text, timestamp without time zone, integer, character varying, character, character, character) RETURNS integer
    AS $_$
insert into 	mp_links 
(
				moduleid,
				title,
				url,
				vieworder,
				description,
				createddate,
				createdby,
				target,
				itemguid,
				moduleguid,
				userguid
) 
values 
(
				$1,
				$2,
				$3,
				$4,
				$5,
				$6,
				$7,
				$8,
				$9,
				$10,
				$11
				
);
select cast(currval('mp_links_itemid_seq') as int4); $_$
    LANGUAGE sql SECURITY DEFINER;



CREATE FUNCTION mp_links_select(integer) RETURNS SETOF mp_links
    AS $_$
select	*
from
    mp_links
where
    moduleid = $1
order by
    vieworder, itemid; $_$
    LANGUAGE sql SECURITY DEFINER;



CREATE FUNCTION mp_links_selectbypage(integer, integer) RETURNS SETOF mp_links_selectbypage_type
    AS $_$
select
		gi.itemid,
		gi.moduleid,
		gi.title, 
		gi.description, 
		m.moduletitle,
		md.featurename
		
from
		mp_links gi
		
JOIN		mp_modules m
ON		gi.moduleid = m.moduleid

JOIN		mp_moduledefinitions md
ON		m.moduledefid = md.moduledefid

JOIN		mp_pagemodules pm
ON		pm.moduleid = m.moduleid

JOIN		mp_pages p
ON		p.pageid = pm.pageid
		
where
		p.siteid = $1
		AND pm.pageid = $2
		; $_$
    LANGUAGE sql SECURITY DEFINER;




CREATE FUNCTION mp_links_selectone(integer) RETURNS SETOF mp_links
    AS $_$
select
   *
from
    mp_links
where
    itemid = $1; $_$
    LANGUAGE sql SECURITY DEFINER;



CREATE FUNCTION mp_links_update(integer, integer, character varying, character varying, integer, text, timestamp without time zone, integer, character varying) RETURNS integer
    AS $_$
declare
	_itemid alias for $1;
	_moduleid alias for $2;
	_title alias for $3;
	_url alias for $4;
	_vieworder alias for $5;
	_description alias for $6;
	_createddate alias for $7;
	_createdby alias for $8;
	_target alias for $9;
	_rowcount int4;
begin

update 		mp_links 
set
			moduleid = _moduleid,
			title = _title,
			url = _url,
			vieworder = _vieworder,
			description = _description,
			createddate = _createddate,
			createdby = _createdby,
			target = _target
			
where
			itemid = _itemid; 
GET DIAGNOSTICS _rowcount = ROW_COUNT;
return _rowcount;
end$_$
    LANGUAGE plpgsql SECURITY DEFINER;


ALTER TABLE ONLY mp_links
    ADD CONSTRAINT pk_links PRIMARY KEY (itemid);


CREATE INDEX ifk_links_moduleid ON mp_links USING btree (moduleid);
