CREATE SEQUENCE mp_rssfeeds_itemid_seq
    INCREMENT BY 1
    NO MAXVALUE
    NO MINVALUE
    CACHE 1;


CREATE TABLE mp_rssfeedentries (
    rowguid character(36) NOT NULL,
    moduleguid character(36) NOT NULL,
    feedguid character(36) NOT NULL,
    feedid integer NOT NULL,
    pubdate timestamp without time zone NOT NULL,
    title character varying(255) NOT NULL,
    author character varying(100),
    blogurl character varying(255) NOT NULL,
    description text NOT NULL,
    link character varying(255) NOT NULL,
    confirmed boolean NOT NULL,
    entryhash integer NOT NULL,
    cachedtimeutc timestamp without time zone NOT NULL
);



CREATE TABLE mp_rssfeeds (
    itemid integer DEFAULT nextval(('"mp_rssfeeds_itemid_seq"'::text)::regclass) NOT NULL,
    moduleid integer NOT NULL,
    createddate timestamp without time zone DEFAULT ('now'::text)::timestamp(3) with time zone NOT NULL,
    userid integer DEFAULT 0 NOT NULL,
    author character varying(100),
    url character varying(255),
    rssurl character varying(255),
    itemguid character varying(36),
    moduleguid character varying(36),
    userguid character varying(36),
    lastmoduserguid character varying(36),
    lastmodutc timestamp without time zone,
    imageurl character varying(255),
    feedtype character varying(20),
    publishbydefault boolean
);



CREATE TYPE mp_rssfeeds_select_one_type AS (
	itemid integer,
	moduleid integer,
	createddate timestamp without time zone,
	userid integer,
	author character varying(100),
	url character varying(255),
	rssurl character varying(255)
);




CREATE TYPE mp_rssfeeds_select_type AS (
	itemid integer,
	moduleid integer,
	createddate timestamp without time zone,
	userid integer,
	author character varying(100),
	url character varying(255),
	rssurl character varying(255)
);




CREATE FUNCTION mp_rssfeeds_delete(integer) RETURNS integer
    AS $_$
declare
	_itemid alias for $1;
	_rowcount int4;
begin

	delete from  mp_rssfeeds
where	itemid = _itemid; 
GET DIAGNOSTICS _rowcount = ROW_COUNT;
return _rowcount;
end$_$
    LANGUAGE plpgsql SECURITY DEFINER;




CREATE FUNCTION mp_rssfeeds_insert(integer, integer, character varying, character varying, character varying, character, character, character, timestamp without time zone) RETURNS integer
    AS $_$
insert into 	mp_rssfeeds
(				
                moduleid,
                userid,
                author,
                url,
                rssurl,
                itemguid,
                moduleguid,
                userguid,
                createddate,
                lastmoduserguid,
                lastmodutc
) 
values 
(				
                $1, --:moduleid
                $2, --:userid
                $3, --:author
                $4, --:url
                $5, --:rssurl
                $6,
                $7,
                $8,
                $9,
                $8,
                $9
);
select cast(currval('mp_rssfeeds_itemid_seq') as int4); $_$
    LANGUAGE sql SECURITY DEFINER;



CREATE FUNCTION mp_rssfeeds_select(integer) RETURNS SETOF mp_rssfeeds
    AS $_$

select
        *
from
        mp_rssfeeds
        
where
        moduleid = $1 ; $_$
    LANGUAGE sql SECURITY DEFINER;



CREATE FUNCTION mp_rssfeeds_select_one(integer) RETURNS SETOF mp_rssfeeds
    AS $_$

select
        *
from
        mp_rssfeeds
        
where
        itemid = $1 ; $_$
    LANGUAGE sql SECURITY DEFINER;



CREATE FUNCTION mp_rssfeeds_update(integer, integer, character varying, character varying, character varying, character, timestamp without time zone) RETURNS integer
    AS $_$
declare
	_itemid alias for $1;
	_moduleid alias for $2;
	_author alias for $3;
	_url alias for $4;
	_rssurl alias for $5;
	_lastmoduserguid alias for $6;
	_lastmodutc alias for $7;
	_rowcount int4;
begin
update 		mp_rssfeeds

set
            moduleid = _moduleid, --:moduleid
            author = _author, --:author
            url = _url, --:url
            rssurl = _rssurl, --:rssurl
            lastmoduserguid = _lastmoduserguid,
            lastmodutc = _lastmodutc
            
where
            itemid = _itemid ; --:itemid
GET DIAGNOSTICS _rowcount = ROW_COUNT;
return _rowcount;
end$_$
    LANGUAGE plpgsql SECURITY DEFINER;


ALTER TABLE ONLY mp_rssfeedentries
    ADD CONSTRAINT pk_rssfeedentries PRIMARY KEY (rowguid);



ALTER TABLE ONLY mp_rssfeeds
    ADD CONSTRAINT pk_rssfeeds PRIMARY KEY (itemid);


CREATE INDEX idxentryhash ON mp_rssfeedentries USING btree (entryhash);

CREATE INDEX idxfeedid ON mp_rssfeedentries USING btree (feedid);

CREATE INDEX idxmoduleguid ON mp_rssfeedentries USING btree (moduleguid);

CREATE INDEX ifk_rssfeeds_moduleid ON mp_rssfeeds USING btree (moduleid);


CREATE INDEX ifk_rssfeeds_userid ON mp_rssfeeds USING btree (userid);

CREATE UNIQUE INDEX mp_rssfeedentries_pkey ON mp_rssfeedentries USING btree (rowguid);

