
CREATE SEQUENCE mp_sharedfilefolders_folderid_seq
    START WITH 1
    INCREMENT BY 1
    NO MAXVALUE
    NO MINVALUE
    CACHE 1;

CREATE SEQUENCE mp_sharedfiles_itemid_seq
    START WITH 1
    INCREMENT BY 1
    NO MAXVALUE
    NO MINVALUE
    CACHE 1;


CREATE SEQUENCE mp_sharedfileshistory_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MAXVALUE
    NO MINVALUE
    CACHE 1;

CREATE TABLE mp_sharedfilefolders (
    folderid integer DEFAULT nextval(('"mp_sharedfilefolders_folderid_seq"'::text)::regclass) NOT NULL,
    moduleid integer NOT NULL,
    foldername character varying(255) NOT NULL,
    parentid integer DEFAULT 0 NOT NULL,
    folderguid character varying(36),
    moduleguid character varying(36),
    parentguid character varying(36)
);


CREATE TABLE mp_sharedfiles (
    itemid integer DEFAULT nextval(('"mp_sharedfiles_itemid_seq"'::text)::regclass) NOT NULL,
    moduleid integer NOT NULL,
    uploaduserid integer NOT NULL,
    friendlyname character varying(255) NOT NULL,
    originalfilename character varying(255) NOT NULL,
    serverfilename character varying(255) NOT NULL,
    sizeinkb integer DEFAULT 0 NOT NULL,
    uploaddate timestamp without time zone DEFAULT ('now'::text)::timestamp(3) with time zone NOT NULL,
    folderid integer DEFAULT 0 NOT NULL,
    itemguid character varying(36),
    moduleguid character varying(36),
    userguid character varying(36),
    folderguid character varying(36),
    fileblob bytea
);

CREATE TABLE mp_sharedfileshistory (
    id integer DEFAULT nextval(('"mp_sharedfileshistory_id_seq"'::text)::regclass) NOT NULL,
    itemid integer NOT NULL,
    moduleid integer NOT NULL,
    friendlyname character varying(255) NOT NULL,
    originalfilename character varying(255),
    serverfilename character varying(50) NOT NULL,
    sizeinkb integer DEFAULT 0 NOT NULL,
    uploaddate timestamp without time zone NOT NULL,
    archivedate timestamp without time zone DEFAULT ('now'::text)::timestamp(3) with time zone NOT NULL,
    uploaduserid integer DEFAULT 0 NOT NULL,
    itemguid character varying(36),
    moduleguid character varying(36),
    userguid character varying(36)
);


CREATE TYPE mp_sharedfiles_selectbymodule_type AS (
	itemid integer,
	moduleid integer,
	uploaduserid integer,
	friendlyname character varying(255),
	originalfilename character varying(255),
	serverfilename character varying(255),
	sizeinkb integer,
	uploaddate timestamp without time zone,
	folderid integer,
	folderguid character(36),
	username character varying(100)
);


CREATE TYPE mp_sharedfiles_selectbypage_type AS (
	itemid integer,
	moduleid integer,
	friendlyname character varying(255),
	moduletitle character varying(255),
	featurename character varying(255)
);


CREATE TYPE mp_sharedfiles_selectone_type AS (
	itemid integer,
	moduleid integer,
	uploaduserid integer,
	friendlyname character varying(255),
	originalfilename character varying(255),
	serverfilename character varying(255),
	sizeinkb integer,
	uploaddate timestamp without time zone,
	folderid integer,
	itemguid character(36),
	moduleguid character(36),
	userguid character(36),
	folderguid character(36)
);

CREATE TYPE mp_sharedfileshistory_select_type AS (
	id integer,
	itemid integer,
	moduleid integer,
	friendlyname character varying(255),
	originalfilename character varying(255),
	serverfilename character varying(50),
	sizeinkb integer,
	uploaddate timestamp without time zone,
	uploaduserid integer,
	archivedate timestamp without time zone,
	name character varying(50),
	itemguid character(36),
	moduleguid character(36),
	userguid character(36)
);

CREATE TYPE mp_sharedfileshistory_selectone_type AS (
	id integer,
	itemid integer,
	moduleid integer,
	friendlyname character varying(255),
	originalfilename character varying(255),
	serverfilename character varying(50),
	sizeinkb integer,
	uploaddate timestamp without time zone,
	archivedate timestamp without time zone,
	uploaduserid integer,
	itemguid character(36),
	moduleguid character(36),
	userguid character(36)
);

CREATE FUNCTION mp_sharedfilefolders_delete(integer) RETURNS integer
    AS $_$
declare
	_folderid alias for $1;
	_rowcount int4;
begin

	delete from  mp_sharedfilefolders
where
	folderid = _folderid; 
GET DIAGNOSTICS _rowcount = ROW_COUNT;
return _rowcount;
end$_$
    LANGUAGE plpgsql SECURITY DEFINER;


CREATE FUNCTION mp_sharedfilefolders_insert(integer, character varying, integer, character, character, character) RETURNS integer
    AS $_$
insert into 	mp_sharedfilefolders 
(
				moduleid,
				foldername,
				parentid,
				moduleguid,
				folderguid,
				parentguid
) 
values 
(
				$1,
				$2,
				$3,
				$4,
				$5,
				$6
				
);
select cast(currval('mp_sharedfilefolders_folderid_seq') as int4); $_$
    LANGUAGE sql SECURITY DEFINER;



CREATE FUNCTION mp_sharedfilefolders_selectallbymodulev2(integer) RETURNS SETOF mp_sharedfilefolders
    AS $_$
select
		*
		
from
		mp_sharedfilefolders
where	moduleid = $1; $_$
    LANGUAGE sql SECURITY DEFINER;



CREATE FUNCTION mp_sharedfilefolders_selectbymodulev2(integer, integer) RETURNS SETOF mp_sharedfilefolders
    AS $_$
select
		*
		
from
		mp_sharedfilefolders
where	moduleid = $1
		and parentid = $2; $_$
    LANGUAGE sql SECURITY DEFINER;




CREATE FUNCTION mp_sharedfilefolders_selectonev2(integer) RETURNS SETOF mp_sharedfilefolders
    AS $_$
select
		*
		
from
		mp_sharedfilefolders
		
where
		folderid = $1; $_$
    LANGUAGE sql SECURITY DEFINER;



CREATE FUNCTION mp_sharedfilefolders_update(integer, integer, character varying, integer, character) RETURNS integer
    AS $_$
declare
	_folderid alias for $1;
	_moduleid alias for $2;
	_foldername alias for $3;
	_parentid alias for $4;
	_parentguid alias for $5;
	_rowcount int4;
begin

update 		mp_sharedfilefolders 
set
			moduleid = _moduleid,
			foldername = _foldername,
			parentid = _parentid,
			parentguid = _parentguid
			
where
			folderid = _folderid; 
GET DIAGNOSTICS _rowcount = ROW_COUNT;
return _rowcount;
end$_$
    LANGUAGE plpgsql SECURITY DEFINER;



CREATE FUNCTION mp_sharedfiles_delete(integer) RETURNS integer
    AS $_$
declare
	_itemid alias for $1;
	_rowcount int4;
begin

	delete from  mp_sharedfiles
where
	itemid = _itemid; 
GET DIAGNOSTICS _rowcount = ROW_COUNT;
return _rowcount;
end$_$
    LANGUAGE plpgsql SECURITY DEFINER;


CREATE FUNCTION mp_sharedfiles_insert(integer, integer, character varying, character varying, character varying, integer, timestamp without time zone, integer, character, character, character, character) RETURNS integer
    AS $_$
insert into 			mp_sharedfiles 
(
				moduleid,
				uploaduserid,
				friendlyname,
				originalfilename,
				serverfilename,
				sizeinkb,
				uploaddate,
				folderid,
				itemguid,
				moduleguid,
				userguid,
				folderguid
) 
values 
(
				$1,
				$2,
				$3,
				$4,
				$5,
				$6,
				$7,
				$8,
				$9,
				$10,
				$11,
				$12
				
);
select cast(currval('mp_sharedfiles_itemid_seq') as int4); $_$
    LANGUAGE sql SECURITY DEFINER;


CREATE FUNCTION mp_sharedfiles_selectbymodule(integer, integer) RETURNS SETOF mp_sharedfiles_selectbymodule_type
    AS $_$
select
		sf.itemid,
		sf.moduleid,
		sf.uploaduserid,
		sf.friendlyname,
		sf.originalfilename,
		sf.serverfilename,
		sf.sizeinkb,
		sf.uploaddate,
		sf.folderid,
		sf.folderguid,
		u.name as username
		
from
		mp_sharedfiles sf
left outer join
		mp_users u
on		sf.uploaduserid = u.userid
		
where	sf.moduleid = $1
		and sf.folderid = $2; $_$
    LANGUAGE sql SECURITY DEFINER;


CREATE FUNCTION mp_sharedfiles_selectbypage(integer, integer) RETURNS SETOF mp_sharedfiles_selectbypage_type
    AS $_$
select
		gi.itemid,
		gi.moduleid,
		gi.friendlyname, 
		m.moduletitle,
		md.featurename
		
from
		mp_sharedfiles gi
		
JOIN		mp_modules m
ON		gi.moduleid = m.moduleid

JOIN		mp_moduledefinitions md
ON		m.moduledefid = md.moduledefid

JOIN		mp_pagemodules pm
ON		pm.moduleid = m.moduleid

JOIN		mp_pages p
ON		p.pageid = pm.pageid
		
where
		p.siteid = $1
		AND pm.pageid = $2
		; $_$
    LANGUAGE sql SECURITY DEFINER;



CREATE FUNCTION mp_sharedfiles_selectone(integer) RETURNS SETOF mp_sharedfiles_selectone_type
    AS $_$
select
	itemid,
	moduleid,
	uploaduserid,
	friendlyname,
	originalfilename,
	serverfilename,
	sizeinkb,
	uploaddate,
	folderid,
	itemguid,
	moduleguid,
	userguid,
        folderguid
		
from
		mp_sharedfiles
		
where
		itemid = $1; $_$
    LANGUAGE sql SECURITY DEFINER;


CREATE FUNCTION mp_sharedfiles_update(integer, integer, integer, character varying, character varying, character varying, integer, timestamp without time zone, integer, character, character) RETURNS integer
    AS $_$
declare
	_itemid alias for $1;
	_moduleid alias for $2;
	_uploaduserid alias for $3;
	_friendlyname alias for $4;
	_originalfilename alias for $5;
	_serverfilename alias for $6;
	_sizeinkb alias for $7;
	_uploaddate alias for $8;
	_folderid alias for $9;
	_userguid alias for $10;
	_folderguid alias for $11;
	_rowcount int4;
begin

update 		mp_sharedfiles 
set
			moduleid = _moduleid,
			uploaduserid = _uploaduserid,
			friendlyname = _friendlyname,
			originalfilename = _originalfilename,
			serverfilename = _serverfilename,
			sizeinkb = _sizeinkb,
			uploaddate = _uploaddate,
			folderid = _folderid,
			userguid = _userguid,
			folderguid = _folderguid
			
where
			itemid = _itemid; 
GET DIAGNOSTICS _rowcount = ROW_COUNT;
return _rowcount;
end$_$
    LANGUAGE plpgsql SECURITY DEFINER;


CREATE FUNCTION mp_sharedfileshistory_delete(integer) RETURNS integer
    AS $_$
declare
	_id alias for $1;
	_rowcount int4;
begin

	delete from  mp_sharedfileshistory
where
	id = _id; 
GET DIAGNOSTICS _rowcount = ROW_COUNT;
return _rowcount;
end$_$
    LANGUAGE plpgsql SECURITY DEFINER;



CREATE FUNCTION mp_sharedfileshistory_insert(integer, integer, character varying, character varying, character varying, integer, timestamp without time zone, integer, timestamp without time zone, character, character, character) RETURNS integer
    AS $_$
insert into 	mp_sharedfileshistory 
(
				itemid,
				moduleid,
				friendlyname,
				originalfilename,
				serverfilename,
				sizeinkb,
				uploaddate,
				uploaduserid,
				archivedate,
				itemguid,
				moduleguid,
				userguid
) 
values 
(
				$1,
				$2,
				$3,
				$4,
				$5,
				$6,
				$7,
				$8,
				$9,
				$10,
				$11,
				$12
				
);
select cast(currval('mp_sharedfileshistory_id_seq') as int4); $_$
    LANGUAGE sql SECURITY DEFINER;


CREATE FUNCTION mp_sharedfileshistory_select(integer, integer) RETURNS SETOF mp_sharedfileshistory_select_type
    AS $_$
select
		h.id,
		h.itemid,
		h.moduleid,
		h.friendlyname,
		h.originalfilename,
		h.serverfilename,
		h.sizeinkb,
		h.uploaddate,
		h.uploaduserid,
		h.archivedate,
		u.name,
		h.itemguid,
		h.moduleguid,
		h.userguid
		
from
		mp_sharedfileshistory h
left outer join	mp_users u
on			u.userid = h.uploaduserid
where	h.moduleid = $1
		and h.itemid = $2
order by 	h.archivedate desc; $_$
    LANGUAGE sql SECURITY DEFINER;


CREATE FUNCTION mp_sharedfileshistory_selectone(integer) RETURNS SETOF mp_sharedfileshistory_selectone_type
    AS $_$
select
	id,
	itemid,
	moduleid,
	friendlyname,
	originalfilename,
	serverfilename,
	sizeinkb,
	uploaddate,
	archivedate,
	uploaduserid,
	itemguid,
	moduleguid,
        userguid
		
from
		mp_sharedfileshistory
where	id = $1; $_$
    LANGUAGE sql SECURITY DEFINER;

ALTER TABLE ONLY mp_sharedfilefolders
    ADD CONSTRAINT pk_sharedfilefolders PRIMARY KEY (folderid);

ALTER TABLE ONLY mp_sharedfiles
    ADD CONSTRAINT pk_sharedfiles PRIMARY KEY (itemid);

ALTER TABLE ONLY mp_sharedfileshistory
    ADD CONSTRAINT pk_sharedfileshistory PRIMARY KEY (id);

CREATE INDEX ifk_sharedfilefolders_moduleid ON mp_sharedfilefolders USING btree (moduleid);

CREATE INDEX ifk_sharedfiles_moduleid ON mp_sharedfiles USING btree (moduleid);

CREATE INDEX ifk_sharedfileshistory_itemid ON mp_sharedfileshistory USING btree (itemid);

CREATE INDEX ifk_sharedfileshistory_moduleid ON mp_sharedfileshistory USING btree (moduleid);
