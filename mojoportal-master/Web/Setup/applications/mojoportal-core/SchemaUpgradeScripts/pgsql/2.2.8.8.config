

-- always put schema changes at the top




create or replace function drop_type
(
	varchar(100) --: typename
) returns int4 
as '
declare
	_typename alias for $1;
	_rowcount int4;

begin

_rowcount := 0;
perform 1 from pg_class where
	  relname like _typename limit 1;
	
if found then
	EXECUTE ''DROP TYPE '' || _typename || '' CASCADE;'';
	GET DIAGNOSTICS _rowcount = ROW_COUNT;
end if;
return _rowcount; 
end'
security definer language plpgsql;

CREATE OR REPLACE FUNCTION  monthname(timestamptz)
  RETURNS varchar(10) AS
'
declare
	_date alias for $1;
	_month int;
	_monthname varchar(10);
begin
    _month := date_part(''month'', _date);
    _monthname := ''January'';
    if _month = 2 then
        _monthname := ''February'';
    end if;
    if _month = 3 then
        _monthname := ''March'';
    end if;
    if _month = 4 then
        _monthname := ''April'';
    end if;
    if _month = 5 then
        _monthname := ''May'';
    end if;
    if _month = 6 then
        _monthname := ''June'';
    end if;
    if _month = 7 then
        _monthname := ''July'';
    end if;
    if _month = 8 then
        _monthname := ''August'';
    end if;
    if _month = 9 then
        _monthname := ''September'';
    end if;
    if _month = 10 then
        _monthname := ''October'';
    end if;
    if _month = 11 then
        _monthname := ''November'';
    end if;
    if _month = 12 then
        _monthname := ''December'';
    end if;
    return _monthname;    
end;'
  LANGUAGE 'plpgsql' VOLATILE SECURITY DEFINER;
  
  -- keep the above at the top
  -- --------------------------------




-- always put schema changes at the top




create or replace function drop_type
(
	varchar(100) --: typename
) returns int4 
as '
declare
	_typename alias for $1;
	_rowcount int4;

begin

_rowcount := 0;
perform 1 from pg_class where
	  relname like _typename limit 1;
	
if found then
	EXECUTE ''DROP TYPE '' || _typename || '' CASCADE;'';
	GET DIAGNOSTICS _rowcount = ROW_COUNT;
end if;
return _rowcount; 
end'
security definer language plpgsql;

CREATE OR REPLACE FUNCTION  monthname(timestamptz)
  RETURNS varchar(10) AS
'
declare
	_date alias for $1;
	_month int;
	_monthname varchar(10);
begin
    _month := date_part(''month'', _date);
    _monthname := ''January'';
    if _month = 2 then
        _monthname := ''February'';
    end if;
    if _month = 3 then
        _monthname := ''March'';
    end if;
    if _month = 4 then
        _monthname := ''April'';
    end if;
    if _month = 5 then
        _monthname := ''May'';
    end if;
    if _month = 6 then
        _monthname := ''June'';
    end if;
    if _month = 7 then
        _monthname := ''July'';
    end if;
    if _month = 8 then
        _monthname := ''August'';
    end if;
    if _month = 9 then
        _monthname := ''September'';
    end if;
    if _month = 10 then
        _monthname := ''October'';
    end if;
    if _month = 11 then
        _monthname := ''November'';
    end if;
    if _month = 12 then
        _monthname := ''December'';
    end if;
    return _monthname;    
end;'
  LANGUAGE 'plpgsql' VOLATILE SECURITY DEFINER;
  
  -- keep the above at the top
  -- --------------------------------


create or replace function mp_users_updatetotalarevenuebyuser
(
	char(36) --:userguid $1
) returns int4 
as '
declare
	_userguid alias for $1;
	_rowcount int;
begin


update mp_users
set totalrevenue = COALESCE((
SELECT SUM(subtotal) FROM mp_commercereport WHERE userguid = _userguid)
, 0)
where userguid = _userguid;  

GET DIAGNOSTICS _rowcount = ROW_COUNT;

return _rowcount;
end'
security definer language plpgsql;
grant execute on function mp_users_updatetotalarevenuebyuser
(
	char(36) --:userguid $1
) to public;

create or replace function mp_users_updatetotalarevenue
(
) returns int4 
as '
declare

	_rowcount int;
begin


update mp_users
set totalrevenue = COALESCE((
SELECT SUM(subtotal) FROM mp_commercereport WHERE userguid = mp_users.userguid)
, 0)
;  

GET DIAGNOSTICS _rowcount = ROW_COUNT;

return _rowcount;
end'
security definer language plpgsql;
grant execute on function mp_users_updatetotalarevenue
(

) to public;


select drop_type('mp_commercesalesbyusertype');
CREATE TYPE  mp_commercesalesbyusertype AS (
		userguid char(36) , 
		userid int4,
		name varchar(255) , 
		loginname varchar(255) , 
		email varchar(255) , 
		sales numeric(15,4)  
		
);

create or replace function mp_commercereport_getsalesgroupedbyuser
(
	char(36) --:siteguid $1
) returns setof mp_commercesalesbyusertype 
as '
select 	
		c.userguid,
		COALESCE(u.userid, -1) As userid,
		COALESCE(u.name, ''deleted user'') AS name,
		u.loginname,
		u.email,
		cast(SUM(subtotal) as numeric(15,4)) As sales 
		
from 		mp_commercereport c

LEFT OUTER JOIN mp_users u
ON	c.userguid = u.userguid
 
where 	c.siteguid = $1 

GROUP BY 
c.userguid,
u.userid,
u.name,
u.loginname,
u.email

ORDER BY sales DESC
LIMIT 20

; '
security definer language sql;
grant execute on function mp_commercereport_getsalesgroupedbyuser
(
	char(36) --:siteguid $1
) to public;



select drop_type('mp_commerce_userpagetype');
CREATE TYPE  mp_commerce_userpagetype AS (
		userguid char(36) , 
		userid int4,
		name varchar(255) , 
		loginname varchar(255) , 
		email varchar(255) , 
		revenue numeric(15,4) 
		
);

create or replace function mp_commercereport_selectuserpage
(
	char(36), --:siteguid $1
	int, --:pagenumber $2
	int --:pagesize $3
) returns setof mp_commerce_userpagetype 
as '
declare
	_siteguid alias for $1;
	_pagenumber alias for $2;
	_pagesize alias for $3;
	_pagelowerbound int;
	_rec mp_commerce_userpagetype%ROWTYPE;

begin

_pagelowerbound := (_pagesize * _pagenumber) - _pagesize;

for _rec in
	select 
	c.userguid,
	COALESCE(u.userid, -1) As userid,
	COALESCE(u.name, ''deleted user'') AS name,
	u.loginname,
	u.email,
        cast(SUM(subtotal) as numeric(15,4)) As revenue  

	from mp_commercereport c
	
	LEFT OUTER JOIN mp_users u
ON	c.userguid = u.userguid
	
	where c.siteguid = _siteguid
	
	GROUP BY 
	c.userguid,
	u.userid,
	u.name,
	u.loginname,
u.email
	
	order by u.name
	
	limit 	_pagesize
	offset 	_pagelowerbound
loop
	return next _rec;
end loop;
return;
end'
security definer language plpgsql;
grant execute on function mp_commercereport_selectuserpage
(
	char(36), --:siteguid $1
	int, --:pagenumber $2
	int --:pagesize $3
) to public;














-- Keep this at the bottom -------------------------

drop function drop_type
(
	varchar(100) --: typename
);
