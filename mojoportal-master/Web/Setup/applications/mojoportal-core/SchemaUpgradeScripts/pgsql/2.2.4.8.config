UPDATE mp_userroles
SET roleguid = (SELECT roleguid from mp_roles
		WHERE mp_userroles.roleid = mp_roles.roleid LIMIT 1);

UPDATE mp_modules
SET featureguid = (SELECT guid from mp_moduledefinitions
		WHERE mp_modules.moduledefid = mp_moduledefinitions.moduledefid LIMIT 1);

 


UPDATE mp_modulesettings
SET moduleguid = (SELECT guid from mp_modules
		WHERE mp_modules.moduleid = mp_ModuleSettings.moduleid LIMIT 1);


UPDATE mp_pagemodules
SET moduleguid = (SELECT guid from mp_modules
		WHERE mp_modules.moduleid = mp_PageModules.moduleid LIMIT 1),
	pageguid = (SELECT pageguid from mp_pages
		WHERE mp_pages.pageid = mp_pagemodules.pageid LIMIT 1);


UPDATE mp_blogs
SET moduleguid = (SELECT guid from mp_modules
		WHERE mp_modules.moduleid = mp_blogs.moduleid LIMIT 1),
	lastmodutc = createddate;
	
UPDATE mp_blogstats
SET moduleguid = (SELECT guid from mp_modules
		WHERE mp_modules.moduleid = mp_blogstats.moduleid LIMIT 1);
		
UPDATE mp_calendarevents
SET moduleguid = (SELECT guid from mp_modules
		WHERE mp_modules.moduleid = mp_CalendarEvents.moduleid LIMIT 1);

UPDATE mp_calendarevents
SET userguid = (SELECT userguid from mp_users
		WHERE mp_users.userid = mp_calendarevents.userid LIMIT 1)
WHERE userid > 0;

UPDATE mp_galleryimages
SET moduleguid = (SELECT guid from mp_modules
		WHERE mp_modules.moduleid = mp_galleryimages.moduleid LIMIT 1);


UPDATE mp_htmlcontent
SET moduleguid = (SELECT guid from mp_modules
		WHERE mp_modules.moduleid = mp_htmlcontent.moduleid LIMIT 1),
	lastmodutc = createddate;

UPDATE mp_links
SET moduleguid = (SELECT guid from mp_modules
		WHERE mp_modules.moduleid = mp_links.moduleid LIMIT 1);


UPDATE mp_links
SET userguid = (SELECT userguid from mp_users
		WHERE mp_users.userid = mp_links.createdby LIMIT 1)
WHERE CreatedBy > 0;

UPDATE mp_sharedfilefolders
SET moduleguid = (SELECT guid from mp_modules
		WHERE mp_modules.moduleid = mp_sharedfilefolders.moduleid LIMIT 1);
		
-- UPDATE mp_sharedfilefolders
-- SET ParentGuid = (SELECT f.FolderGuid from mp_sharedfilefolders f
--		WHERE mp_sharedfilefolders.ParentID = f.FolderID LIMIT 1)
-- WHERE ParentID > 0;

UPDATE mp_sharedfiles
SET moduleguid = (SELECT guid from mp_modules
		WHERE mp_modules.moduleid = mp_sharedfiles.moduleid LIMIT 1);


UPDATE mp_sharedfiles
SET folderguid = (SELECT f.folderguid from mp_sharedfilefolders f
		WHERE mp_sharedfiles.folderid = f.folderid LIMIT 1)
WHERE FolderID > 0;

UPDATE mp_sharedfiles
SET userguid = (SELECT userguid from mp_users
		WHERE mp_users.userid = mp_sharedfiles.uploaduserid LIMIT 1)
WHERE uploaduserid > 0;

UPDATE mp_sharedfileshistory
SET userguid = (SELECT userguid from mp_users
		WHERE mp_users.userid = mp_sharedfileshistory.uploaduserid LIMIT 1)
WHERE uploaduserid > 0;

UPDATE mp_sharedfileshistory
SET itemguid = (SELECT itemguid from mp_sharedfiles
		WHERE mp_sharedfiles.ItemID = mp_sharedfileshistory.ItemID LIMIT 1);
		
UPDATE mp_sharedfileshistory
SET moduleguid = (SELECT guid from mp_modules
		WHERE mp_modules.moduleid = mp_sharedfileshistory.moduleid LIMIT 1);
		
UPDATE mp_rssfeeds
SET moduleguid = (SELECT guid from mp_modules
		WHERE mp_modules.moduleid = mp_rssfeeds.moduleid LIMIT 1);
		

create or replace function drop_constraint
(
	varchar(100), --: tablename
	varchar(100) --: constaintname
) returns int4 
as '
declare
	_tablename alias for $1;
	_constraintname alias for $2;
	_rowcount int4;

begin

_rowcount := 0;
perform 1 from pg_constraint where
	  conname like _constraintname limit 1;
	
if found then
	EXECUTE ''ALTER TABLE '' || _tablename || '' DROP CONSTRAINT '' || _constraintname || '';'';
	GET DIAGNOSTICS _rowcount = ROW_COUNT;
end if;
return _rowcount; 
end'
security definer language plpgsql;
grant execute on function drop_constraint (
	varchar(100), --: tablename $1
	varchar(100) --: constaintname $2
) to public;

select drop_constraint('mp_bannedipaddresses', 'pk_bannedipaddresses');

DROP FUNCTION drop_constraint(
	varchar(100), --: tablename $1
	varchar(100) --: constaintname $2
);

DROP INDEX mp_bannedipaddresses_pkey;

ALTER TABLE mp_bannedipaddresses
      ADD CONSTRAINT mp_bannedipaddresses_pkey PRIMARY KEY (rowid);
	



