<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="Administration" xml:space="preserve">
    <value>Administration</value>
  </data>
  <data name="CantOrphanPagesWarning" xml:space="preserve">
    <value>Deleting this page would make its child pages become root level pages but you do not have permission to create root level pages. Please either delete or move the child pages before deleting this page.</value>
  </data>
  <data name="DeletePage" xml:space="preserve">
    <value>Delete Page</value>
  </data>
  <data name="DeletePageDeniedLogFormat" xml:space="preserve">
    <value>Request denied: user {0} tried to delete page {1} {2} but did not heve permission.</value>
  </data>
  <data name="DeletePageNotAllowedFormat" xml:space="preserve">
    <value>You do not have permission to delete the page: {0}</value>
  </data>
  <data name="DeletePageSuccessLogFormat" xml:space="preserve">
    <value>user {0} deleted page {1} {2}</value>
  </data>
  <data name="DeletePageWarning" xml:space="preserve">
    <value>Are you sure you want to delete this page?</value>
  </data>
  <data name="DeletePageWithChildrenWarning" xml:space="preserve">
    <value>Are you sure you want to delete this page? Child pages of this page will be orphaned and will become root level pages.</value>
  </data>
  <data name="EditPage" xml:space="preserve">
    <value>Edit Page</value>
  </data>
  <data name="EditPermissions" xml:space="preserve">
    <value>Edit Permissions</value>
  </data>
  <data name="EditSettings" xml:space="preserve">
    <value>Edit Settings</value>
  </data>
  <data name="InvalidRequest" xml:space="preserve">
    <value>Invalid Request</value>
  </data>
  <data name="MoveNodeRequestDeniedFormat" xml:space="preserve">
    <value>Request denied: {0} tried to move page node {1} {2} {3} page node {4} {5}</value>
  </data>
  <data name="MoveNodeRequestLogFormat" xml:space="preserve">
    <value>{0} moved page node {1} {2} {3} page node {4} {5}</value>
  </data>
  <data name="MovePageConfirmPrompt" xml:space="preserve">
    <value>Are you sure you want to move the page?</value>
  </data>
  <data name="MovePageNotAllowedFormat" xml:space="preserve">
    <value>You do not have permission to edit or move the page: {0}</value>
  </data>
  <data name="MoveToNewParentNotAllowedFormat" xml:space="preserve">
    <value>You do not have permission to create child pages below {0}  therefore you cannnot move a page to this location.</value>
  </data>
  <data name="MoveToRootNotAllowed" xml:space="preserve">
    <value>Sorry, you are not allowed to create root level pages or move existing pages to the root level.</value>
  </data>
  <data name="NewChildPage" xml:space="preserve">
    <value>New Child Page</value>
  </data>
  <data name="NewRootPage" xml:space="preserve">
    <value>New Root Level Page</value>
  </data>
  <data name="PageManager" xml:space="preserve">
    <value>Page Manager</value>
  </data>
  <data name="PageManagerInstructions" xml:space="preserve">
    <value>You can drag and drop page nodes in the treeview below to move them around in the site hierarchy or to change their sort position. Click on a page to show a menu of commands related to that page.</value>
  </data>
  <data name="Protected" xml:space="preserve">
    <value>Protected</value>
  </data>
  <data name="Public" xml:space="preserve">
    <value>Public</value>
  </data>
  <data name="SortAlphaPrompt" xml:space="preserve">
    <value>Are you sure you want to sort the child pages of the selected page alphabetically?</value>
  </data>
  <data name="SortChildPagesDeniedLogFromat" xml:space="preserve">
    <value>Request denied: user {0} tried to sort child pages for page {1} {2} but did not heve permission.</value>
  </data>
  <data name="SortChildPagesSuccessLogFormat" xml:space="preserve">
    <value>user {0} sorted child pages below page {1} {2} alphabetically</value>
  </data>
  <data name="SortPagesAlpha" xml:space="preserve">
    <value>Sort Child Pages Alphabetically</value>
  </data>
  <data name="StandardPageManager" xml:space="preserve">
    <value>Alternate Page Manager</value>
  </data>
  <data name="ViewPage" xml:space="preserve">
    <value>View Page</value>
  </data>
</root>